{"version":3,"sources":["webpack:///XLSXBuilder.js","webpack:///webpack/bootstrap 20f9dc6df494cc6e5868","webpack:///./core/xlsx/src/xml/XMLNode.js","webpack:///./core/xlsx/src/xml/XMLFile.js","webpack:///./core/xlsx/src/binding/type/Type.js","webpack:///./core/xlsx/src/data/Cell.js","webpack:///./core/xlsx/src/binding/type/Numeric.js","webpack:///./core/xlsx/src/xml/XMLElement.js","webpack:///./core/xlsx/src/objects/Relationships.js","webpack:///./core/xlsx/src/data/Sheet.js","webpack:///./core/xlsx/src/data/Row.js","webpack:///./core/xlsx/src/binding/type/CalendarDate.js","webpack:///./core/xlsx/src/binding/type/BooleanType.js","webpack:///./core/xlsx/src/binding/type/Currency.js","webpack:///./core/xlsx/src/data/SharedStrings.js","webpack:///./core/xlsx/src/binding/type/Text.js","webpack:///./core/xlsx/src/style/Alignment.js","webpack:///./core/xlsx/src/XLSXBuilder.js","webpack:///./core/xlsx/src/objects/App.js","webpack:///./core/xlsx/src/xml/XMLAttribute.js","webpack:///./core/xlsx/src/objects/ContentTypes.js","webpack:///./core/xlsx/src/objects/Core.js","webpack:///./core/xlsx/src/data/SharedString.js","webpack:///./core/xlsx/src/objects/Workbook.js","webpack:///./core/xlsx/src/binding/ColumnConfiguration.js","webpack:///./core/xlsx/src/binding/Column.js","webpack:///./core/xlsx/src/binding/type/Enumeration.js","webpack:///./core/xlsx/src/objects/ReferenceNode.js","webpack:///./core/xlsx/src/style/Styles.js","webpack:///./core/xlsx/src/style/Style.js","webpack:///./core/xlsx/src/style/Font.js","webpack:///./core/xlsx/src/style/Fill.js","webpack:///./core/xlsx/src/style/Border.js","webpack:///./core/xlsx/src/style/NumberFormat.js"],"names":["XLSXBuilder","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","XMLNode","oConfig","j","config","XMLElement","this","tag","value","root","writable","attributes","childs","length","addAttribute","properties","addChild","XMLAttribute","create","constructor","processingInformation","attribute","push","id","node","remove","sProperty","index","referencedElement","aAggregation","indexOf","splice","serialize","sSerialized","xmlEncode","XMLFile","_filename","filename","_path","path","getFileName","setFileName","sFileName","match","Error","getPath","getAbsolutePath","setPath","sPath","lastIndexOf","Type","styleId","alignment","align","_createConfiguration","oData","horizontal","getStyleId","styles","addStyle","registerAt","oStyles","getValue","Cell","oType","metadata","_applyType","CalendarDate","Numeric","BooleanType","Currency","SharedStrings","DataType","Boolean","Date","InlineString","Number","SharedString","FormularString","type","isCustomFormatted","bindingType","setStyle","nStyle","style","setReference","sReference","reference","setValue","oBusinessObject","shared","_isValuePresent","text","toLowerCase","getInstance","insert","data","unit","unitProperty","delimiter","scale","styleIds","DEFAULT","numberFormat","builtin","1","2","3","4","9","10","11","12","13","37","38","39","40","48","key","template","getPrototypeOf","format","parseInt","sValue","_replace","replace","Relationships","oReferenceNode","addRelationship","sTarget","sType","Sheet","oColumnConfiguration","_hierarchyProperty","_hierarchyLevel","_createCols","_createHeader","Row","suffix","MAX_ROWS","col","minWidth","width","_columns","size","columns","_calculateColumnWidth","label","nWidth","factor","step","Math","ceil","max","nCharacters","_setHierarchyDepth","nHierarchyDepth","hierarchyDepth","headerRow","getHeader","views","defaultView","_appendRow","oRow","dimension","getColumnReferenceByIndex","filter","createGroup","sName","nLevel","groupHeaderRow","getGroupHeader","nHierarchyLevel","hierarchyLevelProperty","bind","nIndex","String","fromCharCode","floor","_updateSpans","spans","addCell","oCell","count","calendar","inputFormat","toUpperCase","14","15","16","17","18","19","20","21","22","45","46","47","oSymbols","Y","apply","oDate","setUTCFullYear","M","setUTCMonth","D","setUTCDate","valueOf","_JsDateToExcel","_parseStringDate","odataDurationRegex","test","_parseODataDuration","odataDateRegex","_parseOdataDate","isFinite","vValue","parts","days","hours","minutes","seconds","ms","exec","parseFloat","matchArray","date","offset","setUTCMinutes","getUTCMinutes","getTime","dateStringRegex","nTimestamp","sPattern","substring","slice","charAt","trueValue","falseValue","displayUnit","DEFAULT_SCALE","DIGITS","ADP","AFN","ALL","AMD","BHD","BIF","BYR","CAD","CHF","CLF","CLP","COP","CRC","CZK","DJF","ESP","GNF","GYD","HUF","IDR","IQD","IRR","ISK","ITL","JOD","JPY","KMF","KPW","KRW","KWD","LAK","LBP","LUF","LYD","MGA","MGF","MMK","MNT","MRO","MUR","OMR","PKR","PYG","RSD","RWF","SLL","SOS","STD","SYP","TMM","TND","TRL","TWD","TZS","UGX","UYI","UZS","VND","VUV","XAF","XOF","XPF","YER","ZMK","ZWD","instance","Map","map","has","_shared","set","Text","font","fill","hierarchyLevel","_styleIds","Alignment","LEFT","indent","level","regex","result","every","_contains","sAlign","oAggregation","contained","CENTER","RIGHT","contains","vertical","TOP","MIDDLE","BOTTOM","isDefault","setIndent","nIndent","_setAlignmentAttribute","setHorizontalAlignment","setVerticalAlignment","equals","oAlignment","aBinding","oContext","aMetadataConfig","oMetainfoGroup","sSheetName","sMetadataSheetName","Array","app","objects","App","core","Core","workbook","Workbook","sheetName","metaSheetName","sheet","addSheet","selectSheet","metainfo","hideHeader","_insertIntoSheet","items","ContentTypes","build","files","zip","fileConfig","FileType","xmlObject","relation","zipConfig","relationships","target","JSZip","file","getRelationships","getRelatedFiles","forEach","array","compression","support","nodebuffer","generateAsync","Promise","resolve","reject","generate","append","aData","oSheet","shift","application","version","prefix","FILENAME","title","modifiedBy","toISOString","ReferenceNode","_styles","Styles","addRelatedFile","_sharedStrings","RELATIONS","_relationships","_registeredSheets","ColumnConfiguration","sharedStrings","nCount","sId","sSheetFileName","sheets","sheetElement","createDefinedName","sDefinedName","sDimension","that","iIndex","aArray","definedNames","aColumns","oColumn","_row","Column","_initBinding","getCell","normalizedHierarchyLevel","min","outline","cell","row","bold","color","column","sGroupName","oColumnData","_initType","Enumeration","textAlign","valueMap","_valueMap","_relatedFiles","oXMLFile","addFill","Style","Font","Fill","Border","NumberFormat","fontId","fillId","borderId","numberFormatId","addFont","addBorder","border","_isBuiltin","addNumberFormat","setFontId","setFillId","getBorderId","setNumberFormatId","setAlignment","_addToAggregation","cellXfs","oNewItem","existingItem","addColor","sHexColor","alreadyPresent","colors","mru","some","rgb","oFont","fonts","oFill","fills","getFill","oBorder","borders","numberFormats","setId","ID_OFFSET","getId","family","getAlignment","getFontId","getFillId","getNumberFormatId","oAlign","alignProperty","_apply","nFontId","nFillId","setBorderId","sBorderId","nNumFmtId","nId","applyProperty","oStyle","setName","setSize","setFamily","setBold","DEFAULT_SIZE","DEFAULT_NAME","getName","getSize","isBold","getColor","getFamily","valueAttribute","bBold","nFamily","nSize","isNaN","setFill","setType","DEFAULT_TYPE","getType","sColor","reset","BUILTIN_IDS","formatId","getFormat","iId","setFormat","sFormat","oNumberFormat"],"mappings":"AAAA,GAAIA,aACK,SAAUC,GCGnB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,GAAAD,KA4DA,OAhCAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,SAAAP,EAAAQ,EAAAC,GACAZ,EAAAa,EAAAV,EAAAQ,IACAG,OAAAC,eAAAZ,EAAAQ,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAf,GACA,GAAAQ,GAAAR,KAAAgB,WACA,WAA2B,MAAAhB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAJ,GAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,IAAA0B,EAAA,MDOM,SAAUtB,EAAQD,EAASH,GErDjC,QAAA2B,GAAAC,GACA,GAAAvB,GAAAwB,EAAAC,CAaA,IAXAC,EAAAxB,KAAAyB,KAAAJ,GAGAE,EAAA,gBAAAF,IAAyCK,IAAAL,GAAaA,EAEtDd,OAAAC,eAAAiB,KAAA,QAAsCE,QAAAJ,EAAAK,KAAAC,UAAA,IACtCJ,KAAAC,IAAA,gBAAAH,GAAAG,IAAAH,EAAAG,IAAA,GACAD,KAAAK,cACAL,KAAAM,UAGAR,EAAAO,WACA,IAAAhC,EAAA,EAAaA,EAAAyB,EAAAO,WAAAE,OAA8BlC,IAC3C2B,KAAAQ,aAAAV,EAAAO,WAAAhC,GAIA,IAAAyB,EAAAW,WACA,IAAAZ,EAAA,EAAaA,EAAAC,EAAAW,WAAAF,OAA8BV,IAC3CG,KAAAU,SAAAZ,EAAAW,WAAAZ,IArCA,GAAAE,GAAA/B,EAAA,GACA2C,EAAA3C,EAAA,GAyCA2B,GAAAJ,UAAAT,OAAA8B,OAAAb,EAAAR,WACAI,EAAAJ,UAAAsB,YAAAlB,EAEAA,EAAAmB,sBAAA,yCAYAnB,EAAAJ,UAAAiB,aAAA,SAAAZ,GACA,GAAAmB,GAAAnB,YAAAe,GAAAf,EAAA,GAAAe,GAAAf,EAQA,OANAI,MAAAK,WAAAW,KAAAD,GAEAnB,EAAAqB,IACAnC,OAAAC,eAAAiB,KAAAJ,EAAAqB,IAA2Cf,MAAAa,EAAAX,UAAA,EAAApB,cAAA,IAG3C+B,GAaApB,EAAAJ,UAAAmB,SAAA,SAAAd,GAGA,GAAAsB,GAAAtB,YAAAD,GAAAC,EAAA,GAAAD,GAAAC,EAQA,OANAI,MAAAM,OAAAU,KAAAE,GAEAtB,EAAAqB,IACAnC,OAAAC,eAAAiB,KAAAJ,EAAAqB,IAA2Cf,MAAAgB,EAAAd,UAAA,EAAApB,cAAA,IAG3CkC,GAoBAvB,EAAAJ,UAAA4B,OAAA,SAAAC,GACA,GAAAC,GAAAC,EAAAC,CAGA,MAAAH,IAAApB,OACA,WAMA,KAHAsB,EAAAtB,KAAAoB,aAGAT,GACAY,EAAAvB,KAAAK,eACE,MAAAiB,YAAA3B,KAAAyB,IAAA,IAAAzB,GAAA,IAKF,WAJA4B,GAAAvB,KAAAM,OAWA,MAJAe,GAAAE,EAAAC,QAAAF,GACAC,EAAAE,OAAAJ,EAAA,SACArB,MAAAoB,GAEAE,GAUA3B,EAAAJ,UAAAmC,UAAA,WACA,GAAAC,GAAAtD,EAAAwB,CAKA,KAHA8B,GAAA3B,KAAAG,KAAAR,EAAAmB,sBAAA,QAAAd,KAAAC,IAGA5B,EAAA,EAAYA,EAAA2B,KAAAK,WAAAE,OAA4BlC,IACxCsD,GAAA3B,KAAAK,WAAAhC,GAAAqD,WAIA,IAAA1B,KAAAM,OAAAC,QAAAP,KAAAE,OAAA,gBAAAF,MAAAE,MAAA,CAGA,IAFAyB,GAAA,IAEA9B,EAAA,EAAaA,EAAAG,KAAAM,OAAAC,OAAwBV,IACrC8B,GAAA,gBAAA3B,MAAAM,OAAAT,GAAAG,KAAAM,OAAAT,GAAAG,KAAAM,OAAAT,GAAA6B,WAEAC,IAAA3B,KAAA4B,UAAA5B,KAAAE,OAEAyB,GAAA,KAAA3B,KAAAC,IAAA,QAIA0B,IAAA,IAGA,OAAAA,IAGAvD,EAAAD,QAAAwB,GF0EM,SAAUvB,EAAQD,EAASH,GG7OjC,QAAA6D,GAAAjC,GACAD,EAAApB,KAAAyB,KAAAJ,GAEAI,KAAA8B,UAAAlC,EAAAmC,SACA/B,KAAAgC,MAAApC,EAAAqC,KAfA,GAAAtC,GAAA3B,EAAA,EAkBA6D,GAAAtC,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAsC,EAAAtC,UAAAsB,YAAAgB,EAOAA,EAAAtC,UAAA2C,YAAA,WACA,MAAAlC,MAAA8B,WAQAD,EAAAtC,UAAA4C,YAAA,SAAAC,GAEA,IAAAA,EAAAC,MAAA,kBACA,SAAAC,OAAA,sBAAAF,EAGApC,MAAA8B,UAAAM,GAQAP,EAAAtC,UAAAgD,QAAA,WACA,MAAAvC,MAAAgC,OAQAH,EAAAtC,UAAAiD,gBAAA,WACA,MAAAxC,MAAAuC,UAAAvC,KAAAkC,eASAL,EAAAtC,UAAAkD,QAAA,SAAAC,GAGA,IAAAA,KAAAC,YAAA,OAAAD,EAAAnC,OAAA,EACA,SAAA+B,OAAA,sBAAAI,EAGA1C,MAAAgC,MAAAU,GAGAtE,EAAAD,QAAA0D,GH8PM,SAAUzD,EAAQD,GIjUxB,QAAAyE,GAAAhD,GACAI,KAAA6C,QAAA,KACA7C,KAAA8C,UAAAlD,KAAAmD,MAAAnD,EAAAmD,MAAA,KAcAH,EAAArD,UAAAyD,qBAAA,SAAAC,GACA,MAAAjD,MAAA8C,WAA0BC,OAAUG,WAAAlD,KAAA8C,gBAUpCF,EAAArD,UAAA4D,WAAA,SAAAF,GAKA,MAJA,QAAAjD,KAAA6C,UACA7C,KAAA6C,QAAA7C,KAAAoD,OAAAC,SAAArD,KAAAgD,yBAGAhD,KAAA6C,SASAD,EAAArD,UAAA+D,WAAA,SAAAC,GACAvD,KAAAoD,OAAAG,GAYAX,EAAArD,UAAAiE,SAAA,SAAAlE,EAAA2D,GACA,MAAAA,GAAA3D,IAGAlB,EAAAD,QAAAyE,GJkVM,SAAUxE,EAAQD,EAASH,GKxYjC,QAAAyF,GAAAC,GACA/D,EAAApB,KAAAyB,KAAAyD,EAAAE,UAEA3D,KAAA4D,WAAAF,GAlBA,GAAA/D,GAAA3B,EAAA,GACA6F,EAAA7F,EAAA,GACA8F,EAAA9F,EAAA,GACA+F,EAAA/F,EAAA,IACAgG,EAAAhG,EAAA,IACAiG,EAAAjG,EAAA,GAgBAyF,GAAAlE,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAkE,EAAAlE,UAAAsB,YAAA4C,EAEAA,EAAAS,UACAC,QAAA,IACAC,KAAA,IACAC,aAAA,YACAC,OAAA,IACAC,aAAA,IACAC,eAAA,OAGAf,EAAAE,UACA1D,IAAA,IACAI,aAEAY,GAAA,YACAtC,KAAA,IACAuB,MAAA,KAGAe,GAAA,QACAtC,KAAA,IACAuB,MAAA,MAGAO,aAEAQ,GAAA,OACAhB,IAAA,OAYAwD,EAAAlE,UAAAqE,WAAA,SAAAF,GAGA,OAFA5E,OAAAC,eAAAiB,KAAA,QAAsCE,MAAAuD,EAAAS,SAAAK,aAAAnE,UAAA,IAEtCsD,EAAA7C,aACA,IAAAgD,GACA7D,KAAAyE,KAAAhB,EAAAS,SAAAE,IACA,MACA,KAAAN,GACA9D,KAAAyE,KAAAhB,EAAAS,SAAAI,MACA,MACA,KAAAP,GACA/D,KAAAyE,KAAAhB,EAAAS,SAAAC,QAEAT,EAAAgB,qBACA1E,KAAAQ,cACA7B,KAAA,IACAuB,MAAAuD,EAAAS,SAAAC,SAIA,MACA,KAAAH,GACAhE,KAAAyE,KAAAhB,EAAAS,SAAAI,MACA,MACA,SACAtE,KAAAQ,cACA7B,KAAA,IACAuB,MAAAuD,EAAAS,SAAAK,eAEAvE,KAAAyE,KAAAhB,EAAAS,SAAAK,aAGAvE,KAAA2E,YAAAjB,GAQAD,EAAAlE,UAAAqF,SAAA,SAAAC,GACA7E,KAAA8E,MAAA5E,MAAA2E,GAYApB,EAAAlE,UAAAwF,aAAA,SAAAC,GACA,mBAAAA,KACAA,EAAA3C,MAAA,yBACA,SAAAC,OAAA,6BAAA0C,EAAA,0CAGAhF,MAAAiF,UAAA/E,MAAA8E,GAWAvB,EAAAlE,UAAA2F,SAAA,SAAA9D,EAAA+D,GACA,GAAAC,GAAAlF,CAIA,IAFAA,EAAAF,KAAA2E,YAAAnB,SAAApC,EAAA+D,IAEAnF,KAAAqF,gBAAAnF,GAQA,YAFAF,KAAAsF,KAAApF,MAAA,GAKA,QAAAF,KAAAyE,MACA,IAAAhB,GAAAS,SAAAI,OACAtE,KAAAsF,KAAApF,OACA,MAEA,KAAAuD,GAAAS,SAAAC,QAGA,gBAAAjE,KACAA,EAAA,SAAAA,EAAAqF,eAEAvF,KAAAsF,KAAApF,QAAA,OACA,MAEA,KAAAuD,GAAAS,SAAAE,KACApE,KAAAsF,KAAApF,OACA,MAEA,SACAkF,EAAAnB,EAAAuB,cACAxF,KAAAsF,KAAApF,MAAAkF,EAAAK,OAAAvF,GASAF,KAAA4E,SAAA5E,KAAA2E,YAAAxB,WAAAgC,KAYA1B,EAAAlE,UAAA8F,gBAAA,SAAAK,GACA,sBAAAA,SACA,gBAAAA,IACA,iBAAAA,IACAA,YAAAtB,OAGAhG,EAAAD,QAAAsF,GL6ZM,SAAUrF,EAAQD,EAASH,GMnlBjC,QAAA8F,GAAAlE,GACAgD,EAAArE,KAAAyB,KAAAJ,GAEAI,KAAA2F,KAAA/F,IAAA+F,KAAA,KACA3F,KAAA4F,aAAAhG,IAAAgG,aAAA,KACA5F,KAAA6F,YAAAjG,KAAAiG,UACA7F,KAAA8F,MAAAlG,IAAAkG,MAAA,KAEA9F,KAAA+F,YAtBA,GAAAnD,GAAA5E,EAAA,EAyBA8F,GAAAvE,UAAAT,OAAA8B,OAAAgC,EAAArD,WACAuE,EAAAvE,UAAAsB,YAAAiD,EAEAA,EAAAkC,SACAC,aAAA,GAGAnC,EAAAoC,SACAC,EAAA,IACAC,EAAA,OACAC,EAAA,QACAC,EAAA,WACAC,EAAA,KACAC,GAAA,QACAC,GAAA,WACAC,GAAA,QACAC,GAAA,UACAC,GAAA,gBACAC,GAAA,qBACAC,GAAA,sBACAC,GAAA,2BACAC,GAAA,YAcAlD,EAAAvE,UAAAyD,qBAAA,SAAAC,GACA,GAAAnD,GAAAzB,EAAA4I,EAAAC,EAAAvB,CAIA,IAFA7F,EAAAhB,OAAAqI,eAAArD,EAAAvE,WAAAyD,qBAAAzE,KAAAyB,OAEAA,KAAA6F,WAAA,gBAAA7F,MAAA8F,MAGA,MAFAhG,GAAAmG,aAAAnC,EAAAkC,QAAAC,aAEAnG,CAWA,IARAoH,EAAApD,EAAAoC,QAAA,GACAP,EAAA,GAEA3F,KAAA6F,YACAqB,EAAA,OAAAA,GAIA,gBAAAlH,MAAA8F,OAAA9F,KAAA8F,MAAA,EAGA,IAFAoB,GAAA,IAEA7I,EAAA,EAAaA,EAAA2B,KAAA8F,MAAgBzH,IAC7B6I,GAAA,GAKA,iBAAAlH,MAAA4F,cAAA3C,EACA0C,EAAA,KAAA1C,EAAAjD,KAAA4F,cAAA,IACE,gBAAA5F,MAAA2F,OACFA,EAAA,KAAA3F,KAAA2F,KAAA,KAIAuB,GAAAvB,EAEA7F,EAAAmG,cACAmB,OAAAF,EAIA,KAAAD,IAAAnD,GAAAoC,QACApC,EAAAoC,QAAAe,KAAAC,IACApH,EAAAmG,aAAAoB,SAAAJ,EAAA,IAIA,OAAAnH,IAUAgE,EAAAvE,UAAA4D,WAAA,SAAAF,GACA,GAAAJ,GAAA8C,CAGA,OAAA3F,MAAA4F,aAIA3C,GAIA0C,EAAA1C,EAAAjD,KAAA4F,cACA/C,EAAA7C,KAAA+F,SAAAJ,OAEA,KAAA9C,IACA7C,KAAA+F,SAAAJ,GAAA3F,KAAAoD,OAAAC,SAAArD,KAAAgD,qBAAAC,KAGAjD,KAAA+F,SAAAJ,IAVA,EAJA7G,OAAAqI,eAAArD,EAAAvE,WAAA4D,WAAA5E,KAAAyB,OAiBA5B,EAAAD,QAAA2F,GNumBM,SAAU1F,EAAQD,GO3uBxB,QAAA4B,GAAAH,GACAI,KAAAE,MAAAN,MAAAM,OAAA,gBAAAN,GAAAM,OAAAN,EAAAM,MAAA,GAuBAH,EAAAR,UAAAqC,UAAA,SAAA0F,GACA,sBAAAA,IAAA,OAAAA,EAAAjF,MAAA,WAAArC,KAAAuH,SAAAD,MASAvH,EAAAR,UAAAgI,SAAA,SAAAD,GAQA,MAAAA,GACAE,QAAA,cACAA,QAAA,aACAA,QAAA,aACAA,QAAA,gBAGApJ,EAAAD,QAAA4B,GPyvBM,SAAU3B,EAAQD,EAASH,GQ3yBjC,QAAAyJ,GAAAC,GACA7F,EAAAtD,KAAAyB,KAAAyH,EAAA9D,UAEA+D,YAAA7F,KACA7B,KAAAmC,YAAAuF,EAAAxF,cAAA,SACAlC,KAAAyC,QAAAiF,EAAAnF,UAAA,WAZA,GAAAV,GAAA7D,EAAA,GACA2B,EAAA3B,EAAA,EAeAyJ,GAAAlI,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAkI,EAAAlI,UAAAsB,YAAA4G,EAEAA,EAAA9D,UACA5B,SAAA,QACAE,KAAA,SACAhC,IAAA,gBACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,iEAGAO,eAWAgH,EAAAlI,UAAAoI,gBAAA,SAAAC,EAAAC,GACA,GAAA5G,GAAA,OAAAjB,KAAAM,OAAAC,OAAA,EAoBA,OAlBAP,MAAAM,OAAAU,KAAA,GAAArB,IACAM,IAAA,eACAI,aAEA1B,KAAA,KACAuB,MAAAe,IAGAtC,KAAA,OACAuB,MAAA2H,IAGAlJ,KAAA,SACAuB,MAAA0H,OAKA3G,GAGA7C,EAAAD,QAAAsJ,GRwzBM,SAAUrJ,EAAQD,EAASH,GSj3BjC,QAAA8J,GAAAC,GACAlG,EAAAtD,KAAAyB,KAAA8H,EAAAnE,UAEA7E,OAAAC,eAAAiB,KAAA,YAA0CE,MAAA6H,EAAA3H,UAAA,IAE1CJ,KAAAgI,mBAAAD,EAAAC,mBACAhI,KAAAiI,gBAAA,EACAjI,KAAAkI,cACAlI,KAAAmI,gBAhBA,GAAAtG,GAAA7D,EAAA,GACAoK,EAAApK,EAAA,EAkBA8J,GAAAvI,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAuI,EAAAvI,UAAAsB,YAAAiH,EAEAA,EAAAnE,UACA1D,IAAA,YACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,8DAGAvB,KAAA,QACA0J,OAAA,IACAnI,MAAA,wEAGAvB,KAAA,QACA0J,OAAA,KACAnI,MAAA,gEAGAO,aAEAR,IAAA,UACAQ,aAEAR,IAAA,YACAI,aAEA1B,KAAA,eACAuB,MAAA,UAOAe,GAAA,YACAhB,IAAA,YACAI,aAEAY,GAAA,YACAtC,KAAA,MACAuB,MAAA,SAKAe,GAAA,QACAhB,IAAA,aACAQ,aAEAQ,GAAA,cACAhB,IAAA,YACAI,aAEA1B,KAAA,iBACAuB,MAAA,MAGAO,aAIAQ,GAAA,OACAhB,IAAA,OACAI,aAEA1B,KAAA,SACAuB,MAAA,MAGAvB,KAAA,cACAuB,MAAA,OAGAvB,KAAA,aACAuB,MAAA,eAGAvB,KAAA,QACAuB,MAAA,iBASAe,GAAA,SACAhB,IAAA,gBACAI,aAEA1B,KAAA,mBACAuB,MAAA,SAKAe,GAAA,UACAhB,IAAA,SAGAgB,GAAA,OACAhB,IAAA,cAGAgB,GAAA,SACAhB,IAAA,aACAI,aAEAY,GAAA,YACAtC,KAAA,MACAuB,MAAA,SAKAD,IAAA,cACAI,aAEA1B,KAAA,OACAuB,MAAA,SAGAvB,KAAA,QACAuB,MAAA,SAGAvB,KAAA,MACAuB,MAAA,MAGAvB,KAAA,SACAuB,MAAA,MAGAvB,KAAA,SACAuB,MAAA,QAGAvB,KAAA,SACAuB,MAAA,WAOA4H,EAAAQ,SAAA,QASAR,EAAAvI,UAAA2I,YAAA,WACA,GAAAK,GAAAlK,EAAAmK,EAAAC,CAmBA,KAAApK,EAAA,EAAYA,EAAA2B,KAAA0I,SAAAC,OAA0BtK,IACtCkK,EAAAvI,KAAA0I,SAAAE,QAAAvK,GACAmK,EAAAxI,KAAA6I,sBAAAN,EAAAO,MAAAvI,QApBA,IAqBAkI,EAZA,SAAAM,GACA,GAAAC,GAAAC,CAKA,OAHAA,GAAA,IACAD,EAAA,EAAAC,EAEAC,KAAAC,KAAAJ,EAAAC,MAMAE,KAAAE,IAAApJ,KAAA6I,sBAAAN,EAAAE,OAAAD,IAEAxI,KAAA4I,QAAAlI,UACAT,IAAA,MACAI,aAEA1B,KAAA,MACAuB,MAAA7B,EAAA,IAGAM,KAAA,MACAuB,MAAA7B,EAAA,IAGAM,KAAA,UACAuB,MAAA,MAGAvB,KAAA,QACAuB,MAAAgJ,KAAAE,IAAAX,EAAAD,KAGA7J,KAAA,cACAuB,MAAA,SAgBA4H,EAAAvI,UAAAsJ,sBAAA,SAAAQ,GAKA,sBAAAA,GACA,GAGA,EAAAA,EAAA,EARA,GACA,GACA,MAiBAvB,EAAAvI,UAAA+J,mBAAA,SAAAC,GAGA,gBAAAA,MAAA,GAAAA,EAAA,IAIAvJ,KAAAoH,OAAAoC,gBACAxJ,KAAAoH,OAAA5G,cACAS,GAAA,iBACAtC,KAAA,kBACAuB,MAAAqJ,GAAA,IAIAvJ,KAAAoH,OAAAoC,eAAAtJ,MAAAgJ,KAAAE,IAAApJ,KAAAoH,OAAAoC,eAAAtJ,MAAAqJ,KASAzB,EAAAvI,UAAA4I,cAAA,WACA,GAAAsB,GAAAzJ,KAAA0I,SAAAgB,WAEA,WAAAD,EAIA,MAHAzJ,MAAAmB,OAAA,cACAnB,MAAA2J,MAAAC,YAAAzI,OAAA,OAKAnB,MAAA6J,WAAAJ,IAUA3B,EAAAvI,UAAAsK,WAAA,SAAAC,GACA,GAAAzL,GAAA0L,CAOA,KALAD,EAAA/E,aAAA,IAAA/E,KAAA0F,KAAApF,OAAAC,OAAA,IAEAP,KAAA0F,KAAApF,OAAAU,KAAA8I,EAAApI,aAGArD,EAAA,EAAYA,EAAA2B,KAAAM,OAAAC,OAAwBlC,IACpC,aAAA2B,KAAAM,OAAAjC,GAAA4B,MACA8J,EAAA,MAAA3B,EAAA4B,0BAAAhK,KAAA0I,SAAAC,OAAA,GAAA3I,KAAA0F,KAAApF,OAAAC,OAEAP,KAAA+J,UAAA9E,UAAA/E,MAAA6J,EAEA/J,KAAAiK,SACAjK,KAAAiK,OAAAhF,UAAA/E,MAAA6J,KAcAjC,EAAAvI,UAAA2K,YAAA,SAAAC,EAAAC,GACA,GAAAC,EAEArK,MAAAiI,gBAAAmC,EACAC,EAAArK,KAAA0I,SAAA4B,eAAAH,GAEAnK,KAAA6J,WAAAQ,IAaAvC,EAAAvI,UAAAkG,OAAA,SAAAxC,GACA,GAAAsH,EAEA,IAAAvK,KAAA0F,KAAApF,OAAAC,QAAAuH,EAAAQ,SACA,SAAAhG,OAAA,qBAGAiI,GACAvK,KAAA0I,SAAA8B,uBAAAvH,EAAAjD,KAAA0I,SAAA8B,wBAAAxK,KAAAiI,gBAGAjI,KAAA6J,WAAA7J,KAAA0I,SAAA+B,KAAAxH,EAAAsH,IACAvK,KAAAsJ,mBAAAiB,IAGAnM,EAAAD,QAAA2J,GT+3BM,SAAU1J,EAAQD,EAASH,GUluCjC,QAAAoK,KACAzI,EAAApB,KAAAyB,KAAAoI,EAAAzE,UAXA,GAAAhE,GAAA3B,EAAA,GACAyF,EAAAzF,EAAA,EAaAoK,GAAA7I,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACA6I,EAAA7I,UAAAsB,YAAAuH,EAEAA,EAAAzE,UACA1D,IAAA,MACAI,aAEAY,GAAA,YACAtC,KAAA,IACAuB,MAAA,KAGAe,GAAA,QACAtC,KAAA,QACAuB,MAAA,SAiBAkI,EAAA4B,0BAAA,SAAAU,GACA,MAAAA,GAAA,GACAC,OAAAC,aAAA,GAAAF,GACAtC,EAAA4B,0BAAAd,KAAA2B,MAAAH,EAAA,OAAAC,OAAAC,aAAA,GAAAF,EAAA,KAWAtC,EAAA7I,UAAAuL,aAAA,WACA9K,KAAA+K,MAAA7K,MAAA,KAAAF,KAAAM,OAAAC,QAUA6H,EAAA7I,UAAAyL,QAAA,SAAAC,GACA,GAAAC,EAEAD,gBAAAxH,KAIAyH,EAAAlL,KAAAM,OAAAU,KAAAiK,GACAjL,KAAA8K,eAGA9K,KAAAiF,UAAA/E,OACA+K,EAAAlG,aAAAqD,EAAA4B,0BAAAkB,EAAA,GAAAlL,KAAAiF,UAAA/E,OAGAF,KAAA8E,OACAmG,EAAArG,SAAA5E,KAAA8E,MAAA5E,SAYAkI,EAAA7I,UAAAwF,aAAA,SAAAC,GACA,GAAA3G,GAAA4G,CAGA,KADAA,EAAA,gBAAAD,GAAA2F,OAAA3F,OACAC,EAAA5C,MAAA,oBAKArC,KAAAiF,UAAA/E,OAAA+E,EAEA,IADAjF,KAAAiF,UAAA/E,MAAA+E,EACA5G,EAAA,EAAaA,EAAA2B,KAAAM,OAAAC,OAAwBlC,IACrC2B,KAAAM,OAAAjC,GAAA0G,aAAAqD,EAAA4B,0BAAA3L,GAAA4G,IAUAmD,EAAA7I,UAAAqF,SAAA,SAAAC,GACA,GAAAxG,GAAAyG,CAQA,KANA9E,KAAA8E,QACAA,EAAA9E,KAAAQ,cAA6B7B,KAAA,MAC7BG,OAAAC,eAAAiB,KAAA,SAAwCE,MAAA4E,KAGxC9E,KAAA8E,MAAA5E,MAAA2E,EACAxG,EAAA,EAAYA,EAAA2B,KAAAM,OAAAC,OAAwBlC,IACpC2B,KAAAM,OAAAjC,GAAAuG,SAAAC,IAIAzG,EAAAD,QAAAiK,GVqvCM,SAAUhK,EAAQD,EAASH,GWh3CjC,QAAA6F,GAAAjE,GACAgD,EAAArE,KAAAyB,KAAAJ,GAEAI,KAAAyE,KAAA7E,IAAA6E,KAAA,KACAzE,KAAAoH,OAAAxH,IAAAwH,OAAA,KACApH,KAAAmL,SAAAvL,IAAAuL,SAAA,KACAnL,KAAAoL,YAAAxL,GAAA,gBAAAA,GAAAwL,YAAAxL,EAAAwL,YAAAC,cAAA,KApBA,GAAAzI,GAAA5E,EAAA,EAuBA6F,GAAAtE,UAAAT,OAAA8B,OAAAgC,EAAArD,WACAsE,EAAAtE,UAAAsB,YAAAgD,EAEAA,EAAAmC,SACAC,aAAA,IAGApC,EAAAqC,SACAoF,GAAA,WACAC,GAAA,WACAC,GAAA,QACAC,GAAA,SACAC,GAAA,aACAC,GAAA,gBACAC,GAAA,OACAC,GAAA,UACAC,GAAA,cACAC,GAAA,QACAC,GAAA,YACAC,GAAA,UAGApI,EAAAqI,UACAC,GACAC,MAAA,SAAA9E,EAAA+E,GACAA,EAAAC,eAAAhF,KAGAiF,GACAH,MAAA,SAAA9E,EAAA+E,GACAA,EAAAG,YAAAlF,EAAA,KAGAmF,GACAL,MAAA,SAAA9E,EAAA+E,GACAA,EAAAK,WAAApF,MAYAzD,EAAAtE,UAAAyD,qBAAA,WACA,GAAAlD,GAAAmH,EAAAC,CAIA,IAFApH,EAAAhB,OAAAqI,eAAAtD,EAAAtE,WAAAyD,qBAAAzE,KAAAyB,OAEAA,KAAAyE,OAAAzE,KAAAoH,SAAApH,KAAAmL,SAGA,MAFArL,GAAAmG,aAAApC,EAAAmC,QAAAC,aAEAnG,CAIA,QAAAE,KAAAyE,MACA,eACAyC,EAAArD,EAAAqC,QAAA,GACA,MACA,YACAgB,EAAArD,EAAAqC,QAAA,GACA,MACA,SACAgB,EAAArD,EAAAqC,QAAA,IAQA,OALA,gBAAAlG,MAAAoH,SACAF,EAAAlH,KAAAoH,OAAA/E,MAAA,+BAAArC,KAAAoH,OAAAF,GAIAlH,KAAAmL,UACA,cACAjE,EAAA,eACA,MACA,gBACAA,EAAA,kBAKApH,EAAAmG,cACAmB,OAAAF,EAIA,KAAAD,IAAApD,GAAAqC,QACArC,EAAAqC,QAAAe,KAAAC,IACApH,EAAAmG,aAAAoB,SAAAJ,EAAA,IAIA,OAAAnH,IAUA+D,EAAAtE,UAAAiE,SAAA,SAAApC,EAAA6B,GACA,GAAA/C,GAAA+C,EAAA7B,EAEA,eAAAlB,OAAA,KAAAA,EACA,MAIA,gBAAAA,KACAA,IAAAyM,WAIA,gBAAAzM,GACA2D,EAAA+I,eAAA1M,GAIAF,KAAAoL,aAAA,gBAAApL,MAAAoL,YAEAvH,EAAA+I,eAAA/I,EAAAgJ,iBAAA3M,EAAAF,KAAAoL,cAIA,SAAApL,KAAAyE,MAAAZ,EAAAiJ,mBAAAC,KAAA7M,GAEA2D,EAAA+I,eAAA/I,EAAAmJ,oBAAA9M,IAIA2D,EAAAoJ,eAAAF,KAAA7M,GAEA2D,EAAA+I,eAAA/I,EAAAqJ,gBAAAhN,IAIAiN,SAAAjN,GACA2D,EAAA+I,eAAAvF,SAAAnH,EAAA,KAGA,OAUA2D,EAAAmJ,oBAAA,SAAAI,GACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAWA,OAHAL,GAAAxJ,EAAAiJ,mBAAAa,KAAAP,GAGAC,EAAA,IAAAA,EAAA,GACAD,GAGAE,EAAAjG,SAAAgG,EAAA,UACAE,EAAAlG,SAAAgG,EAAA,UACAG,EAAAnG,SAAAgG,EAAA,UACAI,EAAAG,WAAAP,EAAA,OAEAK,EAAAL,EAAA,GAGAK,EAFAA,EAEA,IAAAE,WAAA,KAAAF,GAEA,EAGAA,GAAA,IAAAD,EAAA,IAAAD,EAAA,KAAAD,EAAA,MAAAD,EAEA,MAAAD,EAAA,KACAK,MAGAA,IAUA7J,EAAAqJ,gBAAA,SAAA5F,GACA,GAAAuG,GAAAC,EAAAC,CAgBA,OARAF,GAAAhK,EAAAoJ,eAAAU,KAAArG,GACAwG,EAAA,GAAA1J,MAAAiD,SAAAwG,EAAA,QAEAA,EAAA,IAAAA,EAAA,KACAE,EAAA1G,SAAAwG,EAAA,GAAAA,EAAA,OACAC,EAAAE,cAAAF,EAAAG,gBAAAF,IAGAD,EAAAI,WAcArK,EAAAoJ,eAAA,qCAOApJ,EAAAiJ,mBACA,gGAIAjJ,EAAAsK,gBAAA,2BAwBAtK,EAAA+I,eAAA,SAAAwB,GAMA,MAAAlF,MAAAE,IAAAgF,EAAA,gBAgBAvK,EAAAgJ,iBAAA,SAAAvF,EAAA+G,GACA,GAAAR,GAAAC,EAAAQ,CAEAR,GAAA,GAAA1J,MAAA,EAEA,IAGA,QAFAyJ,EAAAhK,EAAAsK,gBAAAR,KAAAU,MAGAC,EAAAhH,EAAAiH,MAAAV,EAAAxM,MAAAwM,EAAAxM,MAAAwM,EAAA,GAAAtN,QAEAsD,EAAAqI,SAAA2B,EAAA,GAAAW,OAAA,IAAApC,MAAA/E,SAAAiH,EAAA,IAAAR,UAEE,OAAAD,EAEF,OAAAC,GAAAI,WAGA9P,EAAAD,QAAA0F,GXo4CM,SAAUzF,EAAQD,EAASH,GYlsDjC,QAAA+F,GAAAnE,GACAgD,EAAArE,KAAAyB,KAAAJ,GAEAI,KAAAyO,UAAA7O,IAAA6O,UAAA,KACAzO,KAAA0O,WAAA9O,IAAA8O,WAAA,KAjBA,GAAA9L,GAAA5E,EAAA,EAoBA+F,GAAAxE,UAAAT,OAAA8B,OAAAgC,EAAArD,WACAwE,EAAAxE,UAAAsB,YAAAkD,EAEAA,EAAAiC,SACAC,aAAA,GAUAlC,EAAAxE,UAAAmF,kBAAA,WACA,QAAA1E,KAAAyO,WACA,gBAAAzO,MAAAyO,aACAzO,KAAA0O,YACA,gBAAA1O,MAAA0O,YAaA3K,EAAAxE,UAAAyD,qBAAA,WACA,GAAAlD,EAOA,OALAA,GAAAhB,OAAAqI,eAAApD,EAAAxE,WAAAyD,qBAAAzE,KAAAyB,MACAF,EAAAmG,aACAjG,KAAA0E,qBACI0C,OAAA,IAAApH,KAAAyO,UAAA,OAAoCzO,KAAA0O,WAAA,KAA4B3K,EAAAiC,QAAAC,aAEpEnG,GAGA1B,EAAAD,QAAA4F,GZqtDM,SAAU3F,EAAQD,EAASH,GalwDjC,QAAAgG,GAAApE,GACAkE,EAAAvF,KAAAyB,KAAAJ,GAEAI,KAAA2O,YAAA,iBAAA/O,GAAA+O,aAAA/O,EAAA+O,YApBA,GAAA7K,GAAA9F,EAAA,EAuBAgG,GAAAzE,UAAAT,OAAA8B,OAAAkD,EAAAvE,WACAyE,EAAAzE,UAAAsB,YAAAmD,EAUAA,EAAA4K,cAAA,EAEA5K,EAAA6K,QACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACA3J,QAAA,EACA4J,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,GAWA9O,EAAAzE,UAAAyD,qBAAA,SAAAC,GACA,GAAA5E,GAAAwB,EAAAiG,EAAAoB,EAAAvB,CAqBA,KAjBAuB,EAAA,QAMApB,EAHA9F,KAAA4F,cAAA,gBAAA5F,MAAA8F,MAGA9B,EAAA6K,OAAA5L,EAAAjD,KAAA4F,eAFA5F,KAAA8F,MAMA,gBAAAA,KACAA,EAAA9B,EAAA6K,OAAA7I,SAIAkB,GAAApB,EAAA,WAEAzH,EAAA,EAAYA,EAAAyH,EAAWzH,IACvB6I,GAAA,GAGA,KAAArH,EAAAmE,EAAA4K,cAAA9I,EAAyCjG,EAAA,EAAOA,IAChDqH,GAAA,IAcA,OAVAlH,MAAA2O,cACAhJ,EAAA1C,EAAAjD,KAAA4F,cAAA,IAAA3C,EAAAjD,KAAA4F,cAAA,aAGAsB,IAAA,IAAAvB,GAIAuB,EAAA,KAAAA,EAAA,QAAgCA,GAEvBjB,cAAgBmB,OAAAF,KAGzB9I,EAAAD,QAAA6F,GbyxDM,SAAU5F,EAAQD,EAASH,Gcr6DjC,QAAAiG,KACA,GAAAA,EAAA8O,mBAAA9O,GACA,MAAAA,GAAA8O,QAGAlR,GAAAtD,KAAAyB,KAAAiE,EAAAN,UAEA7E,OAAAC,eAAAiB,KAAA,OAAqCE,MAAA,GAAA8S,KAAA5S,UAAA,IACrCtB,OAAAC,eAAAiB,KAAA,WAAyCE,MAAA,GAAAqE,GAAA,IAAAnE,UAAA,IAEzC6D,EAAA8O,SAAA/S,KA3BA,GAAA6B,GAAA7D,EAAA,GACAuG,EAAAvG,EAAA,GA6BAiG,GAAA1E,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACA0E,EAAA1E,UAAAsB,YAAAoD,EAQAA,EAAAuB,YAAA,WAKA,MAJAvB,GAAA8O,WACA9O,EAAA8O,SAAA,GAAA9O,IAGAA,EAAA8O,UAGA9O,EAAAN,UACA5B,SAAA,oBACA9B,IAAA,MACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,+DA2BA+D,EAAA1E,UAAAkG,OAAA,SAAA6B,GACA,GAAAjG,EAEA,OAAArB,MAAAiT,IAAAC,IAAA5L,GACAtH,KAAAiT,IAAA/T,IAAAoI,IAGAtH,KAAAmT,QAAAjO,SAAAoC,GACAjG,EAAArB,KAAAiT,IAAAtK,KACA3I,KAAAiT,IAAAG,IAAA9L,EAAAjG,GAGArB,KAAAM,OAAAU,KAAAhB,KAAAmT,QAAAzR,aAEAL,IAGAjD,EAAAD,QAAA8F,Gd47DM,SAAU7F,EAAQD,EAASH,Ge3gEjC,QAAAqV,GAAAzT,GACAgD,EAAArE,KAAAyB,KAAAJ,GAEAI,KAAAsT,KAAA1T,IAAA0T,KAAA,KACAtT,KAAAuT,KAAA3T,IAAA2T,KAAA,KACAvT,KAAAkH,SAAAtH,IAAAsH,SAAA,KACAlH,KAAAwT,eAAA5T,IAAA4T,eAAA,KAEAxT,KAAAyT,aA3BA,GAAA7Q,GAAA5E,EAAA,GACA0V,EAAA1V,EAAA,GA6BAqV,GAAA9T,UAAAT,OAAA8B,OAAAgC,EAAArD,WACA8T,EAAA9T,UAAAsB,YAAAwS,EAEAA,EAAArN,SACAsN,MACA3K,KAAA,GACAhK,KAAA,UAWA0U,EAAA9T,UAAAyD,qBAAA,SAAAC,GACA,GAAAnD,EAcA,OAZAA,GAAAhB,OAAAqI,eAAAkM,EAAA9T,WAAAyD,qBAAAzE,KAAAyB,MACAF,EAAAyT,KAAAvT,KAAAuT,KACAzT,EAAAwT,KAAAtT,KAAAsT,KAGAtT,KAAAwT,iBACA1T,EAAAiD,OACAG,WAAAwQ,EAAAxQ,WAAAyQ,KACAC,OAAA,EAAA3Q,EAAAjD,KAAAwT,kBAIA1T,GAUAuT,EAAA9T,UAAA4D,WAAA,SAAAF,GACA,GAAAJ,GAAAgR,CAGA,OAAA7T,MAAAwT,eAIAvQ,GAIA4Q,EAAA5Q,EAAAjD,KAAAwT,gBACA3Q,EAAA7C,KAAAyT,UAAAI,OAEA,KAAAhR,IACA7C,KAAAyT,UAAAI,GAAA7T,KAAAoD,OAAAC,SAAArD,KAAAgD,qBAAAC,KAGAjD,KAAAyT,UAAAI,IAVA,EAJA/U,OAAAqI,eAAAkM,EAAA9T,WAAA4D,WAAA5E,KAAAyB,OA4BAqT,EAAA9T,UAAAiE,SAAA,SAAA/C,EAAAwC,GACA,GAAAZ,GAAAyR,EAAAC,EAAA7T,CAEA,KAAAF,KAAAkH,SACA,sBAAAzG,GAAAwC,EAAAxC,GAAAwC,EAAAxC,EAAA,GAUA,IANAA,EAAAuT,MAAA,SAAA1U,GACA,cAAA2D,EAAA3D,QACA,KAAA2D,EAAA3D,IACA,gBAAA2D,GAAA3D,IAAA,KAAA2D,EAAA3D,KAIA,QAOA,KAJAyU,EAAA/T,KAAAkH,SACA4M,EAAA,cAEAzR,EAAAyR,EAAAnG,KAAA3N,KAAAkH,UACA,OAAA7E,GAEAnC,EAAA+C,EAAAxC,EAAA4B,EAAA,KAGA,OAAAnC,OAAA,KAAAA,IACAA,EAAA,IAIA6T,IAAAvM,QAAAnF,EAAA,GAAAnC,GAEAmC,EAAAyR,EAAAnG,KAAA3N,KAAAkH,SAGA,OAAA6M,IAGA3V,EAAAD,QAAAkV,GfoiEM,SAAUjV,EAAQD,EAASH,GgB5qEjC,QAAA0V,KACA/T,EAAApB,KAAAyB,KAAA0T,EAAA/P,UA0CA,QAAAsQ,GAAAC,EAAAC,GACA,GAAAlN,GAAAmN,GAAA,CAEA,KAAAnN,IAAAkN,GACAC,KAAAD,EAAAlN,KAAAiN,GAAA,kBAAAC,GAAAlN,EAGA,OAAAmN,GA3DA,GAAAzU,GAAA3B,EAAA,EAaA0V,GAAAnU,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAmU,EAAAnU,UAAAsB,YAAA6S,EAEAA,EAAA/P,UACA1D,IAAA,aAGAyT,EAAAxQ,YACAyQ,KAAA,OACAU,OAAA,SACAC,MAAA,QACAC,SAAA,SAAAL,GAEA,MAAAD,GAAAC,EAAAR,EAAAxQ,cAIAwQ,EAAAc,UACAC,IAAA,MACAC,OAAA,SACAC,OAAA,SACAJ,SAAA,SAAAL,GAEA,MAAAD,GAAAC,EAAAR,EAAAc,YA0BAd,EAAAnU,UAAAqV,UAAA,WACA,UAAA5U,KAAAK,WAAAE,QAQAmT,EAAAnU,UAAAsV,UAAA,SAAAC,GAGA,mBAAAA,OAAA,EAGA,WAFA9U,MAAAmB,OAAA,SAKAnB,MAAA+U,uBAAA,SAAAD,GAGA9U,KAAAkD,YACAlD,KAAAgV,uBAAAtB,EAAAxQ,WAAAyQ,OASAD,EAAAnU,UAAAyV,uBAAA,SAAAd,GAGAR,EAAAxQ,WAAAqR,SAAAL,IAIAlU,KAAA+U,uBAAA,aAAAb,IAQAR,EAAAnU,UAAA0V,qBAAA,SAAAf,GAGAR,EAAAc,SAAAD,SAAAL,IAIAlU,KAAA+U,uBAAA,WAAAb,IAUAR,EAAAnU,UAAAwV,uBAAA,SAAA9T,EAAAf,GAGAF,KAAAiB,IACAjB,KAAAQ,cACAS,KACAtC,KAAAsC,IAIAjB,KAAAiB,GAAAf,SAGAwT,EAAAnU,UAAA2V,OAAA,SAAAC,GACA,gBAAAA,GAAA,OAAAA,GACAnV,KAAAwU,UAAAW,EAAAX,UACAxU,KAAAkD,YAAAiS,EAAAjS,YACAlD,KAAA4T,QAAAuB,EAAAvB,QAGAxV,EAAAD,QAAAuV,GhB0rEQ,CACA,CAEF,SAAUtV,EAAQD,EAASH,GiBpzEjC,QAAAF,GAAAsX,EAAAC,EAAA7B,GACA,GAAA8B,GAAAjX,EAAAkX,EAAAC,EAAAC,CAEA,MAAAL,YAAAM,QAAAN,EAAA7U,QACA,SAAA+B,OAAA,sBAoBA,IAhBAkT,EAAA,sBACAC,EAAA,WAEAzV,KAAA2V,IAAA,GAAA3V,MAAA4V,QAAAC,IAAAR,GACArV,KAAA8V,KAAA,GAAA9V,MAAA4V,QAAAG,KAAAV,GACArV,KAAAgW,SAAA,GAAAhW,MAAA4V,QAAAK,SAGAZ,IACAG,EAAAH,EAAAa,UAAAb,EAAAa,UAAAV,EACAC,EAAAJ,EAAAc,cAAAd,EAAAc,cAAAV,GAGAzV,KAAAoW,MAAApW,KAAAgW,SAAAK,SAAAb,GAAkD5M,QAAAwM,EAAA5B,mBAClDxT,KAAAgW,SAAAM,YAAAtW,KAAAoW,OAEA,gBAAAf,MAAAkB,mBAAAb,OAwBA,IArBAJ,IAEAhW,SAAA,MACAwJ,MAAA,MACAL,MAAA,KAGAnJ,SAAA,QACAwJ,MAAA,QACAL,MAAA,KAKAzI,KAAA2D,SAAA3D,KAAAgW,SAAAK,SAAAZ,GAA8D7M,QAAA0M,EAAAkB,YAAA,IAO9DnY,EAAA,EAAaA,EAAAgX,EAAAkB,SAAAhW,OAA8BlC,IAC3CkX,EAAAF,EAAAkB,SAAAlY,GAEA2B,KAAA2D,SAAAuG,YAAAqL,EAAA5W,KAAA,GACAqB,KAAAyW,iBAAAlB,EAAAmB,MAAAnI,QAAAvO,KAAA2D,UA9EA,GAAAkS,GAAA7X,EAAA,IACA2Y,EAAA3Y,EAAA,IACA+X,EAAA/X,EAAA,IACAyJ,EAAAzJ,EAAA,GACA8J,EAAA9J,EAAA,GACAiY,EAAAjY,EAAA,GA8EAF,GAAAyB,WAEAqW,SACAC,MACAc,eACAZ,OACAtO,gBACAK,QACAmO,YAcAW,MAAA,WACA,GAAAC,GAAAC,EAAAzY,EAAAwB,EAAAkX,EAAAC,EAAAC,EAAAC,EAAAC,CA8BA,KA5BAN,IAEAlY,KAAA,sBACAsD,KAAA,GACAwC,KAAAzE,KAAA4V,QAAAe,eAGAhY,KAAA,QACAsD,KAAA,SACAwC,KAAAzE,KAAA4V,QAAAnO,cACA2P,gBAEAC,OAAA,kBACA5S,KAAA,uFAGA4S,OAAA,mBACA5S,KAAA,4FAGA4S,OAAA,oBACA5S,KAAA,4FAKAqS,EAAA,GAAAQ,OAEAjZ,EAAA,EAAaA,EAAAwY,EAAAtW,OAAkBlC,IAAA,CAK/B,GAJA0Y,EAAAF,EAAAxY,GACA2Y,EAAAD,EAAAtS,MACAwS,EAAA,GAAAD,aAEAhX,MAAA4V,QAAAnO,cACA,IAAA5H,EAAA,EAAeA,EAAAkX,EAAAK,cAAA7W,OAAqCV,IACpDqX,EAAAH,EAAAK,cAAAvX,GACAoX,EAAAtP,gBAAAuP,EAAAG,OAAAH,EAAAzS,KAIAqS,GAAAS,KAAAR,EAAA9U,KAAA8U,EAAApY,KAAAsY,EAAAvV,aA8BA,MA1BAoV,GAAAS,KAAAvX,KAAA2V,IAAAnT,kBAAAxC,KAAA2V,IAAAjU,aACAoV,EAAAS,KAAAvX,KAAA8V,KAAAtT,kBAAAxC,KAAA8V,KAAApU,aAGAoV,EAAAS,KAAAvX,KAAAgW,SAAAxT,kBAAAxC,KAAAgW,SAAAtU,aACAoV,EAAAS,KAAAvX,KAAAgW,SAAAwB,mBAAAhV,kBAAAxC,KAAAgW,SAAAwB,mBAAA9V,aAEA1B,KAAAgW,SAAAyB,kBAAAC,QAAA,SAAAH,EAAAlW,EAAAsW,GACAb,EAAAS,OAAA/U,kBAAA+U,EAAA7V,eAGAyV,GACAS,YAAA,UACAnT,KAAA6S,MAAAO,QAAAC,WAAA,4BAGAhB,EAAAiB,cACAjB,EAAAiB,cAAAZ,GAEA,GAAAa,SAAA,SAAAC,EAAAC,GAGAD,EAFAnB,EAAAqB,SAAAhB,OAgBAiB,OAAA,SAAAC,GACArY,KAAAyW,iBAAA4B,EAAArY,KAAAoW,QAUAK,iBAAA,SAAA4B,EAAAC,GACA,GAAAX,EAGA,aAAAU,GAAA,OAAAA,EAMA,IAFAV,EAAAU,YAAA3C,OAAA2C,MAEAV,EAAApX,QACA+X,EAAA7S,OAAAkS,EAAAY,WAKAna,EAAAD,QAAAL,GjBo1EM,SAAUM,EAAQD,EAASH,GkB/hFjC,QAAA6X,GAAAR,GACAxT,EAAAtD,KAAAyB,KAAA6V,EAAAlS,UAEA0R,IAEAA,EAAAmD,cACAxY,KAAAwY,YAAAtY,MAAAmV,EAAAmD,aAGAnD,EAAAoD,UACAzY,KAAAyY,QAAAvY,MAAAmV,EAAAoD,UAtBA,GAAA5W,GAAA7D,EAAA,EA2BA6X,GAAAtW,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAsW,EAAAtW,UAAAsB,YAAAgV,EAEAA,EAAAlS,UACA1B,KAAA,YACAF,SAAA,UACA9B,IAAA,aACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,8EAGAvB,KAAA,QACA0J,OAAA,KACAnI,MAAA,yEAGAO,aAEAQ,GAAA,cACAhB,IAAA,cACAC,MAAA,YAGAD,IAAA,cACAC,MAAA,MAGAD,IAAA,UACAC,MAAA,WAGAD,IAAA,YACAC,MAAA,UAGAe,GAAA,UACAhB,IAAA,aACAC,MAAA,UAKA9B,EAAAD,QAAA0X,GlBijFM,SAAUzX,EAAQD,EAASH,GmB3mFjC,QAAA2C,GAAAf,GACAG,EAAAxB,KAAAyB,KAAAJ,GAEAI,KAAArB,KAAAiB,EAAAjB,KAAAiB,EAAAjB,KAAA,GACAqB,KAAA0Y,OAAA9Y,EAAA8Y,OAAA9Y,EAAA8Y,OAAA,GACA1Y,KAAAqI,OAAAzI,EAAAyI,OAAAzI,EAAAyI,OAAA,GAnBA,GAAAtI,GAAA/B,EAAA,EAsBA2C,GAAApB,UAAAT,OAAA8B,OAAAb,EAAAR,WACAoB,EAAApB,UAAAsB,YAAAF,EAcAA,EAAApB,UAAAmC,UAAA,WACA,WAAA1B,KAAA0Y,OAAA1Y,KAAA0Y,OAAA,QAAA1Y,KAAArB,MACAqB,KAAAqI,OAAA,IAAArI,KAAAqI,OAAA,SAAArI,KAAA4B,UAAA5B,KAAAE,OAAA,KAGA9B,EAAAD,QAAAwC,GnB+nFM,SAAUvC,EAAQD,EAASH,GoBlqFjC,QAAA2Y,KACA9U,EAAAtD,KAAAyB,KAAA2W,EAAAhT,UARA,GAAA9B,GAAA7D,EAAA,EAWA2Y,GAAApX,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAoX,EAAApX,UAAAsB,YAAA8V,EAGAA,EAAAgC,SAAA,GACAhC,EAAAhT,UACA5B,SAAA,sBACA9B,IAAA,QACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,iEAGAO,aAEAR,IAAA,UACAI,aAEA1B,KAAA,YACAuB,MAAA,QAGAvB,KAAA,cACAuB,MAAA,sBAKAD,IAAA,UACAI,aAEA1B,KAAA,YACAuB,MAAA,SAGAvB,KAAA,cACAuB,MAAA,+DAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,qBAGAvB,KAAA,cACAuB,MAAA,iFAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,8BAGAvB,KAAA,cACAuB,MAAA,gFAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,mBAGAvB,KAAA,cACAuB,MAAA,6EAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,0BAGAvB,KAAA,cACAuB,MAAA,oFAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,uBAGAvB,KAAA,cACAuB,MAAA,iEAKAD,IAAA,WACAI,aAEA1B,KAAA,WACAuB,MAAA,sBAGAvB,KAAA,cACAuB,MAAA,6EAOA9B,EAAAD,QAAAwY,GpB+qFM,SAAUvY,EAAQD,EAASH,GqBzyFjC,QAAA+X,GAAAV,GACAxT,EAAAtD,KAAAyB,KAAA+V,EAAApS,UAEA0R,IAEAA,EAAAuD,QACA5Y,KAAA4Y,MAAA1Y,MAAAmV,EAAAuD,OAGAvD,EAAAwD,aACA7Y,KAAA6Y,WAAA3Y,MAAAmV,EAAAwD,aAtBA,GAAAhX,GAAA7D,EAAA,EA2BA+X,GAAAxW,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAwW,EAAAxW,UAAAsB,YAAAkV,EAEAA,EAAApS,UACA1B,KAAA,YACAF,SAAA,WACA9B,IAAA,oBACAE,MAAA,EACAE,aAEA1B,KAAA,QACA0J,OAAA,KACAnI,MAAA,4EAGAvB,KAAA,QACA0J,OAAA,KACAnI,MAAA,qCAGAvB,KAAA,QACA0J,OAAA,UACAnI,MAAA,8BAGAvB,KAAA,QACA0J,OAAA,WACAnI,MAAA,iCAGAvB,KAAA,QACA0J,OAAA,MACAnI,MAAA,8CAGAO,aAEAQ,GAAA,QACAhB,IAAA,WACAC,MAAA,iBAGAD,IAAA,aACAC,MAAA,4BAGAD,IAAA,kBACAI,aAEAqY,OAAA,MACA/Z,KAAA,OACAuB,MAAA,mBAGAA,OAAA,GAAAkE,OAAA0U,gBAGA7Y,IAAA,cACAC,MAAA,mBAGAe,GAAA,aACAhB,IAAA,oBACAC,MAAA,aAKA9B,EAAAD,QAAA4X,GrB2zFM,SAAU3X,EAAQD,EAASH,GsBj5FjC,QAAAuG,GAAA+C,GACA3H,EAAApB,KAAAyB,KAAAuE,EAAAZ,UAEA3D,KAAAkF,SAAAoC,GAZA,GAAA3H,GAAA3B,EAAA,EAeAuG,GAAAhF,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAgF,EAAAhF,UAAAsB,YAAA0D,EAGAA,EAAAZ,UACA1D,IAAA,KACAQ,aAEAQ,GAAA,OACAhB,IAAA,OAWAsE,EAAAhF,UAAA2F,SAAA,SAAAoC,GAGAtH,KAAAsF,KAAApF,MADAoH,GAAA,gBAAAA,GACAA,EASA,GAAAA,GAIAlJ,EAAAD,QAAAoG,GtBg6FM,SAAUnG,EAAQD,EAASH,GuBt8FjC,QAAAiY,KACA,GAAAhP,EAEA8R,GAAAxa,KAAAyB,KAAAiW,EAAAtS,UAGA3D,KAAAgZ,QAAA,GAAAC,GACAjZ,KAAAgZ,QAAAvW,QAAAzC,KAAAuC,WACAvC,KAAAkZ,eAAAlZ,KAAAgZ,SAGAhZ,KAAAmZ,eAAAlV,EAAAuB,cACAxF,KAAAmZ,eAAA1W,QAAAzC,KAAAuC,WACAvC,KAAAkZ,eAAAlZ,KAAAmZ,eAEA,KAAAlS,IAAAgP,GAAAmD,UACApZ,KAAAqZ,eAAA1R,gBAAAsO,EAAAmD,UAAAnS,GAAAoQ,OAAApB,EAAAmD,UAAAnS,GAAAxC,KAGAzE,MAAAsZ,qBAhCA,GAAAC,GAAAvb,EAAA,IACA+a,EAAA/a,EAAA,IACAiG,EAAAjG,EAAA,IACA8J,EAAA9J,EAAA,GACAib,EAAAjb,EAAA,GA+BAiY,GAAA1W,UAAAT,OAAA8B,OAAAmY,EAAAxZ,WACA0W,EAAA1W,UAAAsB,YAAAoV,EAEAA,EAAAmD,WACAI,eACAnC,OAAA,oBACA5S,KAAA,qFAEArB,QACAiU,OAAA,aACA5S,KAAA,+EAIAwR,EAAAtS,UACA5B,SAAA,eACAE,KAAA,MACAhC,IAAA,WACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,8DAGAvB,KAAA,QACA0J,OAAA,IACAnI,MAAA,wEAGAvB,KAAA,QACA0J,OAAA,KACAnI,MAAA,gEAGAO,aAEAR,IAAA,YACAQ,aAEAR,IAAA,eACAI,aAEA1B,KAAA,UACAuB,MAAA,MAGAvB,KAAA,UACAuB,MAAA,MAGAvB,KAAA,cACAuB,MAAA,UAGAvB,KAAA,eACAuB,MAAA,cAOAe,GAAA,SACAhB,IAAA,WAGAgB,GAAA,eACAhB,IAAA,kBAcAgW,EAAA1W,UAAA8W,SAAA,SAAAlM,EAAAvK,GACA,GAAAmI,GAAA0R,EAAAC,EAAApB,EAAAqB,CAmCA,OAjCAF,GAAAzZ,KAAA4Z,OAAAtZ,OAAAC,OAAA,EACAoZ,EAAA,QAAAF,EAAA,OACAC,EAAA1Z,KAAAqZ,eAAA1R,gBAAA,cAAAgS,EACA,iFAEA3Z,KAAA4Z,OAAAlZ,UACAT,IAAA,QACAI,aAEAY,GAAA,OACAtC,KAAA,OACAuB,MAAAiK,IAGAxL,KAAA,UACAuB,MAAA,GAAAuZ,IAGA9a,KAAA,KACA+Z,OAAA,IACAxY,MAAAwZ,MAKA3R,EAAA,GAAAwR,GAAA3Z,EAAAI,KAAAgZ,SACAV,EAAA,GAAAxQ,GAAAC,GACAuQ,EAAAnW,YAAAwX,GACArB,EAAA7V,QAAAzC,KAAAuC,UAAA,eAEAvC,KAAAkZ,eAAAZ,GACAtY,KAAAsZ,kBAAAtY,KAAAsX,GAEAA,GAQArC,EAAA1W,UAAA+W,YAAA,SAAAgC,GAEA,KAAAA,YAAAxQ,KAAA9H,KAAAsZ,kBAAA9X,QAAA8W,GAAA,EACA,SAAAhW,OAAA,2CAIAtC,MAAAsZ,kBAAA5B,QAAA,SAAAmC,EAAAxY,EAAAsW,GACAkC,EAAAlQ,MAAAC,YAAAzI,OAAA,cAIAmX,EAAA3O,MAAAC,YAAApJ,cACAS,GAAA,WACAtC,KAAA,cACAuB,MAAA,OAUA+V,EAAA1W,UAAAmC,UAAA,WAaA,QAAAoY,GAAAtE,EAAA8C,GACA,GAAAyB,GAAAC,CASA,OAPAA,GAAA1B,EAAArO,OAAAhF,UAAA/E,MACA6Z,EAAAvE,EAAAhU,QAAA,OAAAgU,EAAA,IAAAA,EAAA,IACAuE,GAAA,IACAA,GAAAC,EAAAxS,QAAA,2BAAAnF,GACA,UAAAA,IAnBA,GAAA4X,GAAAja,IAmDA,OAzBAA,MAAAsZ,kBAAA5B,QAAA,SAAAY,EAAA4B,EAAAC,GACA,GAAA3E,GAAAyE,EAAAL,OAAAtZ,OAAA4Z,GAAAvb,KAAAuB,KAEAoY,GAAArO,QACAgQ,EAAAG,aAAA1Z,UACAT,IAAA,cACAI,aAEA1B,KAAA,OACAuB,MAAA,0BAGAvB,KAAA,eACAuB,MAAAga,IAGAvb,KAAA,SACAuB,MAAA,MAGAA,MAAA4Z,EAAAtE,EAAA8C,OAKAxZ,OAAAqI,eAAA8O,EAAA1W,WAAAmC,UAAAnD,KAAAyB,OAGA5B,EAAAD,QAAA8X,GvBy9FM,SAAU7X,EAAQD,EAASH,GwBvrGjC,QAAAub,GAAA3Z,EAAA2D,GACA,GAAA8W,GAAAC,EAAAjc,CAWA,KATA2B,KAAA4I,WACA5I,KAAAua,KAAA,KACAva,KAAAoD,OAAAG,EACAvD,KAAAwW,WAAA5W,EAAA4W,WAEA1X,OAAAC,eAAAiB,KAAA,0BAAwDE,MAAAN,EAAA4T,iBAExD6G,EAAAza,EAAAgJ,QAEAvK,EAAA,EAAYA,EAAAgc,EAAA9Z,OAAqBlC,IAGjC,GAAAA,IACA,gBAAAgc,GAAAhc,KACAgc,EAAAhc,IAAmBiB,SAAA+a,EAAAhc,KAGnBgc,EAAAhc,GAAAmV,eAAAxT,KAAAwK,wBAGA8P,EAAAD,EAAAhc,YAAAmc,GAAAH,EAAAhc,GAAA,GAAAmc,GAAAH,EAAAhc,GAAA2B,KAAAoD,QACApD,KAAA4I,QAAA5H,KAAAsZ,GA3CA,GAAAE,GAAAxc,EAAA,IACAqV,EAAArV,EAAA,IACAoK,EAAApK,EAAA,GACAyF,EAAAzF,EAAA,EAqDAub,GAAAha,UAAAkb,aAAA,WACA,GAAApc,EAIA,KAFA2B,KAAAua,KAAA,GAAAnS,GAEA/J,EAAA,EAAYA,EAAA2B,KAAA4I,QAAArI,OAAyBlC,IACrC2B,KAAAua,KAAAvP,QAAAhL,KAAA4I,QAAAvK,GAAAqc,YAYAnB,EAAAha,UAAAkL,KAAA,SAAAxH,EAAAsH,GACA,GAAAlM,GAAAsc,CAyBA,KAvBA,OAAA3a,KAAAua,MACAva,KAAAya,eAIAE,EAAAzR,KAAA0R,IAAArQ,EAAA,GAMAoQ,IAAA3a,KAAAua,KAAAM,QACA7a,KAAAua,KAAA/Z,cACAS,GAAA,UACAtC,KAAA,eACAuB,MAAAya,IAEEA,GAAA3a,KAAAua,KAAAM,QACF7a,KAAAua,KAAAM,QAAA3a,MAAAya,GACEA,GAAA3a,KAAAua,KAAAM,SACF7a,KAAAua,KAAApZ,OAAA,WAGA9C,EAAA,EAAYA,EAAA2B,KAAA4I,QAAArI,OAAyBlC,IACrC2B,KAAA4I,QAAAvK,GAAAoM,KAAAxH,EAGA,OAAAjD,MAAAua,MASAhB,EAAAha,UAAAmK,UAAA,WACA,GAAAoR,GAAAC,EAAAtW,CAEA,OAAAzE,MAAAwW,WACA,MAGAuE,EAAA,GAAA3S,GACA3D,EAAA,GAAA4O,IACAC,MACA3U,KAAA,QACAgK,KAAA,GACAqS,MAAA,GAEAzH,MACA0H,MAAA,YAKAxW,EAAAnB,WAAAtD,KAAAoD,QAEA2X,EAAAnW,SAAAH,EAAAtB,cACA4X,EAAAva,cACA7B,KAAA,eACAuB,MAAA,MAGAF,KAAA4I,QAAA8O,QAAA,SAAAwD,EAAA7Z,EAAAsW,GAGAmD,EAAA,GAAArX,GAAAgB,GACAqW,EAAA5V,SAAA,QAAAgW,GAEAH,EAAA/P,QAAA8P,KAGAC,IAGAxB,EAAAha,UAAA+K,eAAA,SAAA6Q,GACA,GAAAL,GAAAC,EAAAtW,CA+BA,OA7BAsW,GAAA,GAAA3S,GACA3D,EAAA,GAAA4O,IACAC,MACA3U,KAAA,QACAgK,KAAA,GACAqS,MAAA,GAEAzH,MACA0H,MAAA,YAKAxW,EAAAnB,WAAAtD,KAAAoD,QAEA2X,EAAAnW,SAAAH,EAAAtB,cACA4X,EAAAva,cACA7B,KAAA,eACAuB,MAAA,MAGA6a,EAAAhQ,MAAA7K,MAAA,KAAAF,KAAA2I,OAGAmS,EAAA,GAAArX,GAAAgB,GACAqW,EAAA5V,SAAA,QAAwBvG,KAAAwc,IAExBJ,EAAA/P,QAAA8P,GAEAC,GAUAxB,EAAAha,UAAAoJ,KAAA,WACA,MAAA3I,MAAA4I,QAAArI,QAGAnC,EAAAD,QAAAob,GxBgtGM,SAAUnb,EAAQD,EAASH,GyBj4GjC,QAAAwc,GAAAvX,EAAAM,GACA,GAAA6X,EAIA,MADAA,EAAA,gBAAAnY,IAA4C3D,SAAA2D,GAAgBA,KAC5DmY,EAAA9b,SAA6C,SAAAgD,OAAA,6CAE7CtC,MAAAV,SAAA8b,EAAA9b,SACAU,KAAA8I,MAAAsS,EAAAtS,MAAAsS,EAAAtS,MAAAsS,EAAA9b,SACAU,KAAAyI,MAAA2S,EAAA3S,MACAzI,KAAAoD,OAAAG,EACAvD,KAAAyE,KAAAzE,KAAAqb,UAAAD,GAjCA,GAAA3X,GAAAzF,EAAA,GACA6F,EAAA7F,EAAA,GACA8F,EAAA9F,EAAA,GACAgG,EAAAhG,EAAA,IACA+F,EAAA/F,EAAA,IACAsd,EAAAtd,EAAA,IACAqV,EAAArV,EAAA,GAsDAwc,GAAAjb,UAAA8b,UAAA,SAAApY,GACA,GAAAwB,GAAAoD,CAuDA,OArDAA,GAAA5E,EAAAwB,KAEA,SAAAoD,GAAA,aAAAA,GAAA,SAAAA,GACApD,EAAA,GAAAZ,IACAd,MAAAE,EAAAsY,UACApQ,SAAAlI,EAAAkI,SACA/D,OAAAnE,EAAAmE,OACA3C,KAAAoD,EACAuD,YAAAnI,EAAAmI,cAIApL,KAAA8I,MAAA,aAAAjB,EAAA7H,KAAA8I,MAAA,SAAA9I,KAAA8I,OAGArE,EADE,WAAAoD,EACF,GAAA/D,IACAf,MAAAE,EAAAsY,UACA1V,UAAA5C,EAAA4C,UACAC,MAAA7C,EAAA6C,MACArB,KAAAxB,EAAAwB,KACAkB,KAAA1C,EAAA0C,KACAC,aAAA3C,EAAA2C,eAEE,aAAAiC,EACF,GAAA7D,IACAjB,MAAAE,EAAAsY,UACA9W,KAAAoD,EACAjC,aAAA3C,EAAA2C,aACA+I,YAAA1L,EAAA0L,YACA7I,MAAA7C,EAAA6C,QAEE,YAAA+B,EACF,GAAA9D,IACAhB,MAAAE,EAAAsY,UACA9M,UAAAxL,EAAAwL,UACAC,WAAAzL,EAAAyL,aAEE,gBAAA7G,EACF,GAAAyT,IACAvY,MAAAE,EAAAsY,UACAC,SAAAvY,EAAAuY,WAGA,GAAAnI,IACAtQ,MAAAE,EAAAsY,UACA9W,KAAA,OACAyC,SAAAjE,EAAAiE,SACAsM,eAAAvQ,EAAAuQ,iBAIA/O,EAAAnB,WAAAtD,KAAAoD,QAEAqB,GAcA+V,EAAAjb,UAAAmb,QAAA,WAKA,MAJA1a,MAAA8a,OACA9a,KAAA8a,KAAA,GAAArX,GAAAzD,KAAAyE,OAGAzE,KAAA8a,MAQAN,EAAAjb,UAAAkL,KAAA,SAAAxH,GASAjD,KAAA8a,KAAA5V,SAAAlF,KAAAV,SAAA2D,IAGA7E,EAAAD,QAAAqc,GzB65GM,SAAUpc,EAAQD,EAASH,G0B7iHjC,QAAAsd,GAAA1b,GACAgD,EAAArE,KAAAyB,KAAAJ,GAEAI,KAAAyb,UAAA7b,KAAA4b,SAAA5b,EAAA4b,YAdA,GAAA5Y,GAAA5E,EAAA,EAiBAsd,GAAA/b,UAAAT,OAAA8B,OAAAgC,EAAArD,WACA+b,EAAA/b,UAAAsB,YAAAya,EAWAA,EAAA/b,UAAAiE,SAAA,SAAApC,EAAA6B,GACA,GAAAgE,EAKA,OAHAA,GAAAhE,EAAA7B,IACApB,KAAAyb,oBAAAzI,KAAAhT,KAAAyb,UAAAvc,IAAA+H,GAAAjH,KAAAyb,UAAAxU,KAEA,IAGA7I,EAAAD,QAAAmd,G1B8jHM,SAAUld,EAAQD,EAASH,G2BrlHjC,QAAA+a,GAAAnZ,GACAiC,EAAAtD,KAAAyB,KAAAJ,GAEAI,KAAA0b,iBACA1b,KAAAqZ,eAAA,GAAA5R,GAAAzH,MAEAA,KAAAkZ,eAAAlZ,KAAAqZ,gBArBA,GAAAxX,GAAA7D,EAAA,GACAyJ,EAAAzJ,EAAA,EAuBA+a,GAAAxZ,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACAwZ,EAAAxZ,UAAAsB,YAAAkY,EAGAA,EAAAxZ,UAAA2Z,eAAA,SAAAyC,GACA,KAAAA,YAAA9Z,IACA,SAAAS,OAAA,yCAGAtC,MAAA0b,cAAA1a,KAAA2a,IAGA5C,EAAAxZ,UAAAiY,iBAAA,WACA,MAAAxX,MAAAqZ,gBAUAN,EAAAxZ,UAAAkY,gBAAA,WACA,MAAAzX,MAAA0b,cAAAnN,SAGAnQ,EAAAD,QAAA4a,G3B0mHM,SAAU3a,EAAQD,EAASH,G4BjpHjC,QAAAib,KACApX,EAAAtD,KAAAyB,KAAAiZ,EAAAtV,UAGA3D,KAAA4b,SAAenX,KAAA,SACfzE,KAAA4b,SAAenX,KAAA,YACfzE,KAAAqD,SAAAwY,EAAA7V,SAlBA,GAAAnE,GAAA7D,EAAA,GACA6d,EAAA7d,EAAA,IACA8d,EAAA9d,EAAA,IACA+d,EAAA/d,EAAA,IACAge,EAAAhe,EAAA,IACAie,EAAAje,EAAA,GAgBAib,GAAA1Z,UAAAT,OAAA8B,OAAAiB,EAAAtC,WACA0Z,EAAA1Z,UAAAsB,YAAAoY,EAEAA,EAAAtV,UACA5B,SAAA,aACA9B,IAAA,aACAE,MAAA,EACAE,aAEA1B,KAAA,QACAuB,MAAA,8DAGAvB,KAAA,QACA0J,OAAA,KACAnI,MAAA,gEAGAO,aAEAQ,GAAA,gBACAhB,IAAA,UACAI,aAEAY,GAAA,QACAtC,KAAA,QACAuB,MAAA,QAKAe,GAAA,QACAhB,IAAA,QACAI,aAEAY,GAAA,QACAtC,KAAA,QACAuB,MAAA,QAKAe,GAAA,QACAhB,IAAA,QACAI,aAEAY,GAAA,QACAtC,KAAA,QACAuB,MAAA,QAKAe,GAAA,UACAhB,IAAA,UACAI,aAEAY,GAAA,QACAtC,KAAA,QACAuB,MAAA,QAKAD,IAAA,eACAI,aAEA1B,KAAA,QACAuB,MAAA,MAGAO,aAEAR,IAAA,KACAI,aAEA1B,KAAA,WACAuB,MAAA,MAGAvB,KAAA,SACAuB,MAAA,MAGAvB,KAAA,SACAuB,MAAA,MAGAvB,KAAA,WACAuB,MAAA,UAOAe,GAAA,UACAhB,IAAA,UACAI,aAEAY,GAAA,QACAtC,KAAA,QACAuB,MAAA,QAKAD,IAAA,aACAI,aAEA1B,KAAA,QACAuB,MAAA,MAGAO,aAEAR,IAAA,YACAI,aAEA1B,KAAA,OACAuB,MAAA,WAGAvB,KAAA,OACAuB,MAAA,MAGAvB,KAAA,YACAuB,MAAA,UAOAD,IAAA,OACAI,aAEA1B,KAAA,QACAuB,MAAA,QAKAD,IAAA,cACAI,aAEA1B,KAAA,QACAuB,MAAA,MAGAvB,KAAA,oBACAuB,MAAA,sBAGAvB,KAAA,oBACAuB,MAAA,yBAoCA+Y,EAAA1Z,UAAA8D,SAAA,SAAAJ,GACA,GAAA6B,GAAAoX,EAAAC,EAAAC,EAAAC,CAyBA,OAtBAH,GAAAlc,KAAAsc,QAAArZ,EAAAqQ,MACA6I,EAAAnc,KAAA4b,QAAA3Y,EAAAsQ,MACA6I,EAAApc,KAAAuc,UAAAtZ,EAAAuZ,YAGA,KAAAvZ,EAAAgD,eACAhD,EAAAgD,aAAA,GAGAoW,EACAJ,EAAAQ,WAAAxZ,EAAAgD,cAAAhD,EAAAgD,aAAAjG,KAAA0c,gBAAAzZ,EAAAgD,cAGAnB,EAAA,GAAA+W,GAEA/W,EAAA6X,UAAAT,GACApX,EAAA8X,UAAAT,GACArX,EAAA+X,YAAAT,GACAtX,EAAAgY,kBAAAT,GACAvX,EAAAiY,aAAA9Z,EAAAF,OAGA/C,KAAAgd,kBAAAlY,EAAA9E,KAAAid,UAkBAhE,EAAA1Z,UAAAyd,kBAAA,SAAAE,EAAA3b,GACA,GAAA2J,GAAA7M,CAkBA,OAhBAA,IAAA,EAEAkD,EAAAjB,OAAAoX,QAAA,SAAAyF,EAAA9b,EAAAsW,GACAwF,EAAAjI,OAAAgI,KACA7e,EAAAgD,MAIA,IAAAhD,IACAkD,EAAAb,SAAAwc,GACAhS,EAAA3J,EAAAjB,OAAAC,OAEAgB,EAAA2J,MAAAhL,MAAAgL,EACA7M,EAAA6M,EAAA,GAGA7M,GAaA4a,EAAA1Z,UAAA6d,SAAA,SAAAC,GACA,GAAAC,EAEAtd,MAAAud,QACAvd,KAAAU,UACAO,GAAA,SACAhB,IAAA,SACAQ,aAEAQ,GAAA,MACAhB,IAAA,iBAMAqd,EAAAtd,KAAAud,OAAAC,IAAAld,OAAAmd,KAAA,SAAAxC,GACA,MAAAA,GAAAyC,IAAAxd,QAAA,KAAAmd,MAOArd,KAAAud,OAAAC,IAAA9c,UACAT,IAAA,QACAI,aAEAY,GAAA,MACAtC,KAAA,MACAuB,MAAA,KAAAmd,OAsBApE,EAAA1Z,UAAA+c,QAAA,SAAArZ,GACA,GAAA0a,GAAA,GAAA7B,GAAA7Y,EAEA,OAAAjD,MAAAgd,kBAAAW,EAAA3d,KAAA4d,QAmBA3E,EAAA1Z,UAAAqc,QAAA,SAAA3Y,GACA,GAAA5B,GAAAwc,CAUA,OARAA,GAAA,GAAA9B,GAAA9Y,GAEA5B,EAAArB,KAAAgd,kBAAAa,EAAA7d,KAAA8d,OAEA,OAAAD,EAAAE,WACA/d,KAAAod,SAAAS,EAAAE,WAGA1c,GAmBA4X,EAAA1Z,UAAAgd,UAAA,SAAAtZ,GACA,GAAA+a,GAAA,GAAAhC,GAAA/Y,EAEA,OAAAjD,MAAAgd,kBAAAgB,EAAAhe,KAAAie,UAoBAhF,EAAA1Z,UAAAmd,gBAAA,SAAAzZ,GACA,GAAA5B,GAAA4E,CAOA,OALAA,GAAA,GAAAgW,GAAAhZ,GACA5B,EAAArB,KAAAgd,kBAAA/W,EAAAjG,KAAAke,eAEAjY,EAAAkY,MAAAlC,EAAAmC,UAAA/c,GAEA4E,EAAAoY,SAGAjgB,EAAAD,QAAA8a,G5BmqHM,SAAU7a,EAAQD,EAASH,G6BpkIjC,QAAA6d,KACAlc,EAAApB,KAAAyB,KAAA6b,EAAAlY,UAXA,GAAAhE,GAAA3B,EAAA,GACA0V,EAAA1V,EAAA,GAaA6d,GAAAtc,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAsc,EAAAtc,UAAAsB,YAAAgb,EAEAA,EAAAlY,UACA1D,IAAA,KACAI,aAEAY,GAAA,eACAtC,KAAA,WACAuB,MAAA,MAGAe,GAAA,OACAtC,KAAA,SACAuB,MAAA,MAGAe,GAAA,OACAtC,KAAA,SACAuB,MAAA,MAGAe,GAAA,SACAtC,KAAA,WACAuB,MAAA,OAKA2b,EAAA7V,SACAsN,MACA3U,KAAA,QACAgK,KAAA,GACA2V,OAAA,IACArD,MAAA,IACAD,MAAA,GAEAzH,MACA9O,KAAA,SAIAoX,EAAAtc,UAAAgf,aAAA,WACA,MAAAve,MAAA8C,UAAA9C,KAAA8C,UAAA,MAGA+Y,EAAAtc,UAAAif,UAAA,WACA,MAAAxe,MAAAsT,KAAApT,OAGA2b,EAAAtc,UAAAkf,UAAA,WACA,MAAAze,MAAAuT,KAAArT,OAGA2b,EAAAtc,UAAAsd,YAAA,WACA,MAAA7c,MAAAwc,OAAAtc,OAGA2b,EAAAtc,UAAAmf,kBAAA,WACA,MAAA1e,MAAAiG,aAAA/F,OAeA2b,EAAAtc,UAAAwd,aAAA,SAAA4B,GACA,GAAA7b,GAAA8b,CAOA,IALAA,EAAA,YAGA5e,KAAA6e,OAAAF,EAAA,iBAEA,KAAAA,GAAA,OAAAA,EAGA,WAFA3e,MAAAmB,OAAAyd,EAKAA,KAAA5e,QACA8C,EAAA,GAAA4Q,GAEA1T,KAAAU,SAAAoC,GACAhE,OAAAC,eAAAiB,KAAA4e,GAA8C1e,MAAA4C,EAAA1C,UAAA,EAAApB,cAAA,KAG9CgB,KAAA4e,GAAA5J,uBAAA2J,EAAAzb,YACAlD,KAAA4e,GAAA3J,qBAAA0J,EAAAnK,UACAxU,KAAA4e,GAAA/J,UAAA8J,EAAA/K,SAGAiI,EAAAtc,UAAAod,UAAA,SAAAmC,GACA9e,KAAA6e,OAAAC,EAAA,QAEA9e,KAAAsT,KAAApT,MAAA4e,GAGAjD,EAAAtc,UAAAqd,UAAA,SAAAmC,GACA/e,KAAA6e,OAAAE,EAAA,QAEA/e,KAAAuT,KAAArT,MAAA6e,GAGAlD,EAAAtc,UAAAyf,YAAA,SAAAC,GACAjf,KAAAwc,OAAAtc,MAAA+e,GAGApD,EAAAtc,UAAAud,kBAAA,SAAAoC,GACAlf,KAAA6e,OAAAK,EAAA,gBAEAlf,KAAAiG,aAAA/F,MAAAgf,GAGArD,EAAAtc,UAAAsf,OAAA,SAAAM,EAAAtX,GACA,GAAAuX,GAAA,QAAAvX,CAEA7H,MAAAmB,OAAAie,GAEAD,GACAnf,KAAAQ,cACAS,GAAAme,EACAzgB,KAAAygB,EACAlf,MAAA,OAKA2b,EAAAtc,UAAA2V,OAAA,SAAAmK,GACA,MAAAA,aAAAxD,KAIA7b,KAAAwe,cAAAa,EAAAb,aACAxe,KAAAye,cAAAY,EAAAZ,aACAze,KAAA6c,gBAAAwC,EAAAxC,eACA7c,KAAA0e,sBAAAW,EAAAX,uBACA1e,KAAA8C,YAAAuc,EAAAvc,WAAA9C,KAAA8C,WAAA9C,KAAA8C,UAAAoS,OAAAmK,EAAAvc,cAGA1E,EAAAD,QAAA0d,G7BolIM,SAAUzd,EAAQD,EAASH,G8BzuIjC,QAAA8d,GAAA7Y,GACAtD,EAAApB,KAAAyB,KAAA8b,EAAAnY,UAEAV,eAAAnE,SACAkB,KAAAsf,QAAArc,EAAAtE,MACA4gB,QAAAtc,EAAA0F,MACA6W,UAAAvc,EAAAqb,QACAmB,UAAAxc,EAAA+X,MApBA,GAAArb,GAAA3B,EAAA,EAwBA8d,GAAAvc,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAuc,EAAAvc,UAAAsB,YAAAib,EAEAA,EAAA4D,aAAA,GACA5D,EAAA6D,aAAA,QAEA7D,EAAAnY,UACA1D,IAAA,OACAQ,aAEAQ,GAAA,OACAhB,IAAA,KACAI,aAEAY,GAAA,iBACAtC,KAAA,MACAuB,MAAA4b,EAAA4D,iBAKAze,GAAA,QACAhB,IAAA,QACAI,aAEAY,GAAA,iBACAtC,KAAA,QACAuB,MAAA,QAKAe,GAAA,OACAhB,IAAA,OACAI,aAEAY,GAAA,iBACAtC,KAAA,MACAuB,MAAA4b,EAAA6D,iBAKA1e,GAAA,SACAhB,IAAA,SACAI,aAEAY,GAAA,iBACAtC,KAAA,MACAuB,MAAA,OAaA4b,EAAAvc,UAAA2V,OAAA,SAAAyI,GACA,MAAAA,aAAA7B,KAIA9b,KAAA4f,WAAAjC,EAAAiC,WACA5f,KAAA6f,WAAAlC,EAAAkC,WACA7f,KAAA8f,UAAAnC,EAAAmC,UACA9f,KAAA+f,YAAApC,EAAAoC,YACA/f,KAAAggB,aAAArC,EAAAqC,cAQAlE,EAAAvc,UAAAugB,OAAA,WACA,QAAA9f,KAAAgb,MAQAc,EAAAvc,UAAAsgB,QAAA,WACA,MAAA7f,MAAA2I,KAAAsX,eAAA/f,OAQA4b,EAAAvc,UAAAqgB,QAAA,WACA,MAAA5f,MAAArB,KAAAshB,eAAA/f,OAQA4b,EAAAvc,UAAAwgB,SAAA,WACA,MAAA/f,MAAAib,MAAAgF,eAAA/f,OAeA4b,EAAAvc,UAAAygB,UAAA,WACA,MAAAhgB,MAAAse,OAAA2B,eAAA/f,OASA4b,EAAAvc,UAAAkgB,QAAA,SAAAS,GAIA,MAAAA,OAAAlgB,KAAA,KACAA,MAGAkgB,EACAlgB,KAAAU,UACAO,GATA,OAUAhB,IAAA,MAGAD,KAAAmB,OAbA,QAgBAnB,OAUA8b,EAAAvc,UAAAigB,UAAA,SAAAW,GAMA,MAJAA,GAAA,GAAAA,EAAA,KACAngB,KAAAse,OAAA2B,eAAA/f,MAAAigB,GAGAngB,MASA8b,EAAAvc,UAAA+f,QAAA,SAAAnV,GAmBA,MAlBAA,IAAA,gBAAAA,KACAnK,KAAArB,KAAAshB,eAAA/f,MAAAiK,GAiBAnK,MASA8b,EAAAvc,UAAAggB,QAAA,SAAAa,GAGA,mBAAAA,IAAAC,MAAAD,MAAA,GAAAA,EAAA,GACA,SAAA9d,OAAA,YAAA8d,EAAA,qBAKA,OAFApgB,MAAA2I,KAAAsX,eAAA/f,MAAAkgB,EAEApgB,MAGA5B,EAAAD,QAAA2d,G9B4vIM,SAAU1d,EAAQD,EAASH,G+B99IjC,QAAA+d,GAAA9Y,GACAtD,EAAApB,KAAAyB,KAAA+b,EAAApY,UAEAV,IACAA,EAAAgY,MACAjb,KAAAsgB,QAAArd,EAAAgY,OACGhY,EAAAwB,MACHzE,KAAAugB,QAAAtd,EAAAwB,OAnBA,GAAA9E,GAAA3B,EAAA,EAwBA+d,GAAAxc,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAwc,EAAAxc,UAAAsB,YAAAkb,EAEAA,EAAAyE,aAAA,OAEAzE,EAAApY,UACA1D,IAAA,OACAQ,aAEAQ,GAAA,OACAhB,IAAA,cACAI,aAEAY,GAAA,OACAtC,KAAA,cACAuB,MAAA6b,EAAAyE,kBAaAzE,EAAAxc,UAAA2V,OAAA,SAAA2I,GACA,MAAAA,aAAA9B,KAIA/b,KAAAygB,YAAA5C,EAAA4C,WACAzgB,KAAA+d,YAAAF,EAAAE,YAQAhC,EAAAxc,UAAAwe,QAAA,WAGA,MAAA/d,MAAAuT,KAAAjT,OAAAC,OAAAP,KAAAuT,KAAA0H,MAAAyC,IAAAxd,MAAAoO,UAAA,SAGAyN,EAAAxc,UAAA+gB,QAAA,SAAAI,GACA1gB,KAAA2gB,QAEAD,GAAA,gBAAAA,IAAA,mBAA6D3T,KAAA2T,KAC7D1gB,KAAAuT,KAAA9O,KAAAvE,MAAA,QAOAF,KAAAuT,KAAA7S,UACAO,GAAA,QACAhB,IAAA,UACAI,aAEAY,GAAA,MACAtC,KAAA,MACAuB,MAAA,KAAAwgB,MASA1gB,KAAAuT,KAAA7S,UACAT,IAAA,UACAI,aAEA1B,KAAA,UACAuB,MAAA,WAYA6b,EAAAxc,UAAAkhB,QAAA,WACA,MAAAzgB,MAAAuT,KAAA9O,KAAAvE,OASA6b,EAAAxc,UAAAghB,QAAA,SAAA1Y,GACA7H,KAAA2gB,QAEA3gB,KAAAuT,KAAA9O,KAAAvE,MAAA2H,GAOAkU,EAAAxc,UAAAohB,MAAA,WACA3gB,KAAAuT,KAAA9O,KAAAvE,MAAA,OACAF,KAAAuT,KAAAjT,OAAAC,OAAA,GAGAnC,EAAAD,QAAA4d,G/Bg/IM,SAAU3d,EAAQD,EAASH,GgCvnJjC,QAAAge,KACArc,EAAApB,KAAAyB,KAAAgc,EAAArY,UAPA,GAAAhE,GAAA3B,EAAA,EAUAge,GAAAzc,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACAyc,EAAAzc,UAAAsB,YAAAmb,EAEAA,EAAArY,UACA1D,IAAA,SACAQ,aAEAR,IAAA,SAGAA,IAAA,UAGAA,IAAA,QAGAA,IAAA,WAGAA,IAAA,cAWA+b,EAAAzc,UAAA2V,OAAA,SAAA8I,GAMA,MAAAA,aAAAhC,IAGA5d,EAAAD,QAAA6d,GhCmoJM,SAAU5d,EAAQD,EAASH,GiCtqJjC,QAAAie,GAAAhZ,GACAtD,EAAApB,KAAAyB,KAAAic,EAAAtY,UAEA3D,KAAAoH,OAAAlH,MAAA+C,KAAAmE,OAAAnE,EAAAmE,OAAA6U,EAAAjW,QAjBA,GAAArG,GAAA3B,EAAA,EAoBAie,GAAA1c,UAAAT,OAAA8B,OAAAjB,EAAAJ,WACA0c,EAAA1c,UAAAsB,YAAAob,EAEAA,EAAAtY,UACA1D,IAAA,SACAI,aAEAY,GAAA,WACAtC,KAAA,aAGAsC,GAAA,SACAtC,KAAA,gBAKAsd,EAAA2E,aAAA,8BACA,iDACA3E,EAAAmC,UAAA,IACAnC,EAAAjW,QAAA,WAQAiW,EAAA1c,UAAA8e,MAAA,WACA,MAAAre,MAAA6gB,SAAA3gB,OASA+b,EAAA1c,UAAAuhB,UAAA,WACA,MAAA9gB,MAAAoH,OAAAlH,OASA+b,EAAA1c,UAAA4e,MAAA,SAAAzE,GACA,GAAAqH,GAAA,gBAAArH,KAAArS,SAAAqS,EAAA,GAGA2G,OAAAU,MAAA,GAAA9E,EAAAQ,WAAAsE,KAIA/gB,KAAA6gB,SAAA3gB,MAAAwZ,IASAuC,EAAA1c,UAAAyhB,UAAA,SAAAC,GACAjhB,KAAAoH,OAAAlH,MAAA+gB,GAYAhF,EAAAQ,WAAA,SAAAsE,GACA,MAAA9E,GAAA2E,YAAApf,QAAAuf,IAAA,GAWA9E,EAAA1c,UAAA2V,OAAA,SAAAgM,GACA,MAAAA,aAAAjF,IAIAjc,KAAA8gB,cAAAI,EAAAJ,aAGA1iB,EAAAD,QAAA8d","file":"XLSXBuilder.js","sourcesContent":["var XLSXBuilder =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 17);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(5);\r\nvar XMLAttribute = __webpack_require__(19);\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t = __webpack_require__(0);\r\n\r\n/**\r\n * The XMLFile class is a subclass of XMLNode that enriches the\r\n * object by path and file name information.\r\n *\r\n * @param {Object} oConfig - The configuration object for this XMLFile\r\n * @param {string} oConfig.path - The relative path of this XMLFile\r\n * @param {string} oConfig.filename - The file name of this XMLFile\r\n * @class\r\n */\r\nfunction XMLFile(oConfig) {\r\n\tXMLNode.call(this, oConfig);\r\n\r\n\tthis._filename = oConfig.filename;\r\n\tthis._path = oConfig.path;\r\n}\r\n\r\nXMLFile.prototype = Object.create(XMLNode.prototype);\r\nXMLFile.prototype.constructor = XMLFile;\r\n\r\n/**\r\n * Returns the name of this particular file including its file extension.\r\n *\r\n * @returns {string} Name of the file\r\n */\r\nXMLFile.prototype.getFileName = function() {\r\n\treturn this._filename;\r\n};\r\n\r\n/**\r\n * Assigns the given string as name of the file. The name must contain a file extension.\r\n *\r\n * @param {string} sFileName - Name of the file\r\n */\r\nXMLFile.prototype.setFileName = function(sFileName) {\r\n\r\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\r\n\t\tthrow new Error('Invalid file name: ' + sFileName);\r\n\t}\r\n\r\n\tthis._filename = sFileName;\r\n};\r\n\r\n/**\r\n * Returns the path of the file without any filename.\r\n *\r\n * @returns {string} - Path of the file\r\n */\r\nXMLFile.prototype.getPath = function() {\r\n\treturn this._path;\r\n};\r\n\r\n/**\r\n * Returns the absolute Path to the file.\r\n *\r\n * @returns {string} - Absolute path including the filename\r\n */\r\nXMLFile.prototype.getAbsolutePath = function() {\r\n\treturn this.getPath() + this.getFileName();\r\n};\r\n\r\n/**\r\n * Assigns the given path to this XMLFile. The path needs to end with\r\n * a slash to match the criteria.\r\n *\r\n * @param {string} sPath - Relative path of this XMLFile\r\n */\r\nXMLFile.prototype.setPath = function(sPath) {\r\n\r\n\t/* IE compatible endsWith */\r\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\r\n\t\tthrow new Error('Invalid file path: ' + sPath);\r\n\t}\r\n\r\n\tthis._path = sPath;\r\n};\r\n\r\nmodule.exports = XMLFile;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type(oConfig) {\r\n\tthis.styleId = null;\r\n\tthis.alignment = oConfig && oConfig.align ? oConfig.align : null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * All subclass implementations have to call the superclass method to\r\n * ensure that alignment information will not be lost.\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Configuration object that may contain alignment information\r\n * @protected\r\n */\r\nType.prototype._createConfiguration = function(oData) {\r\n\treturn this.alignment ? { align : {\thorizontal: this.alignment }} : {};\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} [oData] - Business object that contains the actual data\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function(oData) {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t \t= __webpack_require__(0),\r\n\tCalendarDate \t= __webpack_require__(9),\r\n\tNumeric \t\t= __webpack_require__(4),\r\n\tBooleanType \t= __webpack_require__(10),\r\n\tCurrency \t\t= __webpack_require__(11),\r\n\tSharedStrings   = __webpack_require__(12);\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @class\r\n */\r\nfunction Cell(oType) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\t\tcase Numeric:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n\r\n\tthis.bindingType = oType;\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires either\r\n * an shared String proxy object or an inline String. This method can\r\n * only be called once per Cell!\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar shared, value;\r\n\r\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tshared = SharedStrings.getInstance();\r\n\t\t\tthis.text.value = shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar config, i, key,\ttemplate, unit;\r\n\r\n\tconfig = Object.getPrototypeOf(Numeric.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number') {\r\n\t\tconfig.numberFormat = Numeric.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\ttemplate = Numeric.builtin[1];\r\n\tunit = '';\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = ' \"' + this.unit + '\"';\r\n\t}\r\n\r\n\t/* Apply Unit */\r\n\ttemplate += unit;\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\nmodule.exports = Numeric;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && (oConfig.value || typeof oConfig.value === 'number') ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar\tXMLFile = __webpack_require__(1),\r\n\tXMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\r\n * @constructor\r\n */\r\nfunction Relationships(oReferenceNode) {\r\n\tXMLFile.call(this, Relationships.metadata);\r\n\r\n\tif (oReferenceNode instanceof XMLFile) {\r\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\r\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\r\n\t}\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLFile.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\tfilename: '.rels',\r\n\tpath: '_rels/',\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n\r\n\treturn id;\r\n};\r\n\r\nmodule.exports = Relationships;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\r\n\tRow\t\t\t = __webpack_require__(8);\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLFile.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\r\n\tthis._hierarchyLevel = 0;\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLFile.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'sheetPr',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'outlinePr',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'summaryBelow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'views',\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'defaultView',\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 'pane',\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\t/**\r\n\t * Inner function for calculating the column width. The function\r\n\t * will ceil the width to the next step of 0.25 so that the\r\n\t * result mod step is 0.\r\n\t * @param {number} nWidth - The width that needs to be adjusted\r\n\t * @returns {number}  A width rounded to the accuracy of 0.25\r\n\t */\r\n\tfunction roundWidth(nWidth) {\r\n\t\tvar factor, step;\r\n\r\n\t\tstep = 0.25;\r\n\t\tfactor = 1 / step;\r\n\r\n\t\treturn Math.ceil(nWidth * factor) / factor;\r\n\t}\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Sets the maximal hierarchy depth of this Sheet. The value will\r\n * only be changed if the given depth is higher than the previous\r\n * depth.\r\n *\r\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\r\n * @private\r\n */\r\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\r\n\r\n\t/* The maximum supported hierarchy depth is 7 */\r\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.format.hierarchyDepth) {\r\n\t\tthis.format.addAttribute({\r\n\t\t\tid: 'hierarchyDepth',\r\n\t\t\tname: 'outlineLevelRow',\r\n\t\t\tvalue: nHierarchyDepth || 0\r\n\t\t});\r\n\t}\r\n\r\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\tvar headerRow = this._columns.getHeader();\r\n\r\n\tif (headerRow === null) {\r\n\t\tthis.remove('filter');\r\n\t\tthis.views.defaultView.remove('pane');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._appendRow(headerRow);\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar i, dimension;\r\n\r\n\toRow.setReference('' + (this.data.childs.length + 1));\r\n\r\n\tthis.data.childs.push(oRow.serialize());\r\n\r\n\t/* Update sheet dimension */\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tif (this.childs[i].tag == 'dimension') {\r\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\r\n\r\n\t\t\tthis.dimension.reference.value = dimension;\r\n\r\n\t\t\tif (this.filter) {\r\n\t\t\t\tthis.filter.reference.value = dimension;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates a new group inside the sheet with the given hierarchy\r\n * level. All subsequent data rows will be assigned to this group.\r\n *\r\n * @function createGroup\r\n * @param {string} sName - Name of the group that will be displayed in the group header\r\n * @param {number} nLevel - Hierarchy level that will be used for outlining\r\n */\r\nSheet.prototype.createGroup = function(sName, nLevel) {\r\n\tvar groupHeaderRow;\r\n\r\n\tthis._hierarchyLevel = nLevel;\r\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\r\n\r\n\tthis._appendRow(groupHeaderRow);\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but the user rather runs out of\r\n * memory than reaching this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tvar nHierarchyLevel;\r\n\r\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\tnHierarchyLevel =\r\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\r\n\tthis._setHierarchyDepth(nHierarchyLevel);\r\n};\r\n\r\nmodule.exports = Sheet;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = __webpack_require__(0);\r\nvar Cell\t= __webpack_require__(3);\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @protected\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar config, key, template;\r\n\r\n\tconfig = Object.getPrototypeOf(CalendarDate.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\tconfig.numberFormat = CalendarDate.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty -\r\n * @param {Object} oData - Line item that contains data\r\n * @returns {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar value = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\treturn CalendarDate._JsDateToExcel(value);\r\n\t}\r\n\r\n\t/* 2. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseStringDate(value, this.inputFormat));\r\n\t}\r\n\r\n\t/* 3. OData duration string 'PT01H23M45S' */\r\n\tif (this.type === 'time' && CalendarDate.odataDurationRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseODataDuration(value));\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseOdataDate(value));\r\n\t}\r\n\r\n\t/* 5. Unix timestamp as string */\r\n\tif (isFinite(value)) {\r\n\t\treturn CalendarDate._JsDateToExcel(parseInt(value, 10));\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @returns {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @returns {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date object or corresponding timestamp\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp) {\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 30.12.1899 00:00:00 which\r\n\t * corresponds to 0 in Excel\r\n\t */\r\n\treturn Math.max((nTimestamp / (86400 * 1000)) + (25567 + 2), 0);\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @returns {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(BooleanType.prototype)._createConfiguration.call(this);\r\n\tconfig.numberFormat =\r\n\t\tthis.isCustomFormatted() ?\r\n\t\t\t{ format: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"' } : BooleanType.DEFAULT.numberFormat;\r\n\r\n\treturn config;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Numeric = __webpack_require__(4);\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This\r\n * has no effect on the technical scale of currency values. It is\r\n * only used for alignment purposes so that different currencies with\r\n * different scale are still aligned correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrency.DEFAULT_SCALE = 3;\r\n\r\nCurrency.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'AMD': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CAD': 2,\r\n\t'CHF': 2,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'COP': 0,\r\n\t'CRC': 0,\r\n\t'CZK': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'GYD': 0,\r\n\t'HUF': 0,\r\n\t'IDR': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MNT': 0,\r\n\t'MRO': 0,\r\n\t'MUR': 0,\r\n\t'OMR': 3,\r\n\t'PKR': 0,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'TZS': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UZS': 0,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @protected\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\t// TODO implement inheritance with Numeric class\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t// Apply fixed scale, only if no unitProperty is provided\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\r\n\t}\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof scale !== 'number') {\r\n\t\tscale = Currency.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + ' ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* - ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\r\n\tSharedString\t= __webpack_require__(22);\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tif (SharedStrings.instance instanceof SharedStrings) {\r\n\t\treturn SharedStrings.instance;\r\n\t}\r\n\r\n\tXMLFile.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLFile.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\tfilename: 'sharedStrings.xml',\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,{\r\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t\t*/\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\r\n\treturn index;\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\nvar Alignment = __webpack_require__(14);\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this Text type\r\n * @param {Object} [oConfig.font] - Font configuration object\r\n * @param {number} [oConfig.font.size] - Font size\r\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\r\n * @param {Object} [oConfig.fill] - Cell fill configuration object\r\n * @param {Object} [oConfig.fill.color] - Cell fill background color\r\n * @param {Object} [oConfig.fill.type] - Cell fill type\r\n * @param {Object} [oConfig.template] - Text template for this Type\r\n * @param {Object} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\r\n\r\n\tthis._styleIds = [];\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\n/**\r\n * This method creates the XLSX specific style configuration depending on the cell content\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Style configuration used by the Styles class\r\n * @protected\r\n */\r\nText.prototype._createConfiguration = function(oData) {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(Text.prototype)._createConfiguration.call(this);\r\n\tconfig.fill = this.fill;\r\n\tconfig.font = this.font;\r\n\r\n\t/* Overwrites existing alignment for a proper indent */\r\n\tif (this.hierarchyLevel) {\r\n\t\tconfig.align = {\r\n\t\t\thorizontal: Alignment.horizontal.LEFT,\r\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\r\n\t\t};\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\r\n * @returns {number} - ID of the registered Style\r\n */\r\nText.prototype.getStyleId = function(oData) {\r\n\tvar styleId, level;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.hierarchyLevel) {\r\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlevel = oData[this.hierarchyLevel];\r\n\tstyleId = this._styleIds[level];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis._styleIds[level] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this._styleIds[level];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar match, regex, result, skip, value;\r\n\r\n\tif (!this.template) {\r\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tskip = properties.every(function(property) {\r\n\t\treturn oData[property] === null\r\n\t\t\t|| typeof oData[property] === 'undefined'\r\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\r\n\t});\r\n\r\n\tif (skip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tresult = this.template;\r\n\tregex = /{([0-9]+)}/g;\r\n\r\n\tmatch = regex.exec(this.template);\r\n\twhile (match !== null) {\r\n\r\n\t\tvalue = oData[properties[match[1]]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (value === null || typeof value === 'undefined') {\r\n\t\t\tvalue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tresult = result.replace(match[0], value);\r\n\r\n\t\tmatch = regex.exec(this.template);\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = Text;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The Alignment class defines the alignment of content within the\r\n * sheet cells. The Alignment is assigned to a particular Style that\r\n * is registered in the Styles class.\r\n *\r\n * @constructor\r\n */\r\nfunction Alignment() {\r\n\tXMLNode.call(this, Alignment.metadata);\r\n}\r\n\r\nAlignment.prototype = Object.create(XMLNode.prototype);\r\nAlignment.prototype.constructor = Alignment;\r\n\r\nAlignment.metadata = {\r\n\ttag: 'alignment'\r\n};\r\n\r\nAlignment.horizontal = {\r\n\tLEFT: 'left',\r\n\tCENTER: 'center',\r\n\tRIGHT: 'right',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t}\r\n};\r\n\r\nAlignment.vertical = {\r\n\tTOP: 'top',\r\n\tMIDDLE: 'middle',\r\n\tBOTTOM: 'bottom',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nAlignment.prototype.isDefault = function() {\r\n\treturn this.attributes.length == 0;\r\n};\r\n\r\n/**\r\n * Assigns the given indent to this Alignment object.\r\n *\r\n * @param {number} nIndent - Numerical value used as indentation\r\n */\r\nAlignment.prototype.setIndent = function(nIndent) {\r\n\r\n\t/* Remove indent */\r\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\r\n\t\tthis.remove('indent');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('indent', nIndent);\r\n\r\n\t/* A correct indent requires an explicit horizontal alignment */\r\n\tif (!this.horizontal) {\r\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given alignment as horizontal alignment.\r\n *\r\n * @param {string} sAlign - Horizontal alignment that gets applied\r\n */\r\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('horizontal', sAlign);\r\n};\r\n\r\n/**\r\n * Applies the given alignment as vertical alignment.\r\n *\r\n * @param {string} sAlign - Vertical alignment that gets applied\r\n */\r\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.vertical.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('vertical', sAlign);\r\n};\r\n\r\n/**\r\n * Assigns the given value as a named property on this Alignment object.\r\n *\r\n * @param {string} id - The named property id\r\n * @param {number|string} value - Textual or numerical value\r\n * @private\r\n */\r\nAlignment.prototype._setAlignmentAttribute = function(id, value) {\r\n\r\n\t/* Create attribute if not present */\r\n\tif (!this[id]) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: id,\r\n\t\t\tname: id\r\n\t\t});\r\n\t}\r\n\r\n\tthis[id].value = value;\r\n};\r\n\r\nAlignment.prototype.equals = function(oAlignment) {\r\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\r\n\t\t&& this.vertical == oAlignment.vertical\r\n\t\t&& this.horizontal == oAlignment.horizontal\r\n\t\t&& this.indent == oAlignment.indent;\r\n};\r\n\r\nmodule.exports = Alignment;\n\n/***/ }),\n/* 15 */,\n/* 16 */,\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar App\t\t\t\t\t= __webpack_require__(18),\r\n\tContentTypes\t\t= __webpack_require__(20),\r\n\tCore\t\t\t\t= __webpack_require__(21),\r\n\tRelationships\t\t= __webpack_require__(6),\r\n\tSheet\t\t\t\t= __webpack_require__(7),\r\n\tWorkbook\t\t\t= __webpack_require__(23);\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\r\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\r\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\r\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel) {\r\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\r\n\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\t/* Set default values */\r\n\tsSheetName = 'SAP Document Export';\r\n\tsMetadataSheetName = 'Metadata';\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n\tthis.workbook = new this.objects.Workbook();\r\n\r\n\t/* Overwrite default Sheet names if maintained */\r\n\tif (oContext) {\r\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\r\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\r\n\t}\r\n\r\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\r\n\tthis.workbook.selectSheet(this.sheet);\r\n\r\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\r\n\r\n\t\t/* Define column configuration for metadata sheet */\r\n\t\taMetadataConfig = [\r\n\t\t\t{\r\n\t\t\t\tproperty: 'key',\r\n\t\t\t\tlabel: 'Key',\r\n\t\t\t\twidth: 20\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tproperty: 'value',\r\n\t\t\t\tlabel: 'Value',\r\n\t\t\t\twidth: 20\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t/* Add optional Metadata Sheet*/\r\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\r\n\r\n\t\t/*\r\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\r\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\r\n\t\t * manipulate the original metadata array.\r\n\t\t */\r\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\r\n\t\t\toMetainfoGroup = oContext.metainfo[i];\r\n\r\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\r\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSheet: Sheet,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\t\tzip = new JSZip();\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType();\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\r\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\r\n\r\n\t\t// Add workbook and its related files\r\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\r\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\r\n\r\n\t\tthis.workbook.getRelatedFiles().forEach(function(file, index, array) {\r\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize());\r\n\t\t});\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\tif (zip.generateAsync) {\r\n\t\t\tpromise = zip.generateAsync(zipConfig);\r\n\t\t} else { // Zip.generate from JSZip 2.x\r\n\t\t\tpromise = new Promise(function(resolve, reject) {\r\n\t\t\t\tvar zipped = zip.generate(zipConfig);\r\n\r\n\t\t\t\tresolve(zipped);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t},\r\n\r\n\t/**\r\n\t * Appends the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tthis._insertIntoSheet(aData, this.sheet);\r\n\t},\r\n\r\n\t/**\r\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\r\n\t *\r\n\t * @param {Array} aData - Array of business objects that should be inserted\r\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\r\n\t * @private\r\n\t */\r\n\t_insertIntoSheet: function(aData, oSheet) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\toSheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLFile.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLFile.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'app.xml',\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.54' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(5);\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLFile.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLFile.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.FILENAME = '';\r\nContentTypes.metadata = {\r\n\tfilename: '[Content_Types].xml',\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLFile.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLFile.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'core.xml',\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = Core;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\nmodule.exports = SharedString;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ColumnConfiguration\t= __webpack_require__(24),\r\n\tReferenceNode\t\t= __webpack_require__(27),\r\n\tSharedStrings\t\t= __webpack_require__(12),\r\n\tSheet\t\t\t\t= __webpack_require__(7),\r\n\tStyles\t\t\t\t= __webpack_require__(28);\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tvar key;\r\n\r\n\tReferenceNode.call(this, Workbook.metadata);\r\n\r\n\t/* Create and register central Styles instance for this workbook */\r\n\tthis._styles = new Styles();\r\n\tthis._styles.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._styles);\r\n\r\n\t/* Create and register central SharedStrings instance for this workbook */\r\n\tthis._sharedStrings = SharedStrings.getInstance();\r\n\tthis._sharedStrings.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._sharedStrings);\r\n\r\n\tfor (key in Workbook.RELATIONS) {\r\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\r\n\t}\r\n\r\n\tthis._registeredSheets = [];\r\n}\r\n\r\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.RELATIONS = {\r\n\tsharedStrings: {\r\n\t\ttarget: 'sharedStrings.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t},\r\n\tstyles: {\r\n\t\ttarget: 'styles.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t}\r\n};\r\n\r\nWorkbook.metadata = {\r\n\tfilename: 'workbook.xml',\r\n\tpath: 'xl/',\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'definedNames',\r\n\t\t\ttag: 'definedNames'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds a new {@link Sheet} to this {@link Workbook}\r\n *\r\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\r\n * @param {Object} oConfig - The column configuration of this Sheet\r\n * @param {Array} oConfig.columns - Array containing the configuration for each column\r\n * @param {boolean} [oConfig.bHideHeader] - Hides the header row (optional - default: false)\r\n * @returns {Sheet} - The newly added {@link Sheet}\r\n */\r\nWorkbook.prototype.addSheet = function(sName, oConfig) {\r\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\r\n\r\n\tnCount = this.sheets.childs.length + 1;\r\n\tsSheetFileName = 'sheet' + nCount + '.xml';\r\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\r\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\r\n\r\n\tthis.sheets.addChild({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + nCount\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: sId\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\toColumnConfiguration = new ColumnConfiguration(oConfig, this._styles);\r\n\toSheet = new Sheet(oColumnConfiguration);\r\n\toSheet.setFileName(sSheetFileName);\r\n\toSheet.setPath(this.getPath() + 'worksheets/');\r\n\r\n\tthis.addRelatedFile(oSheet);\r\n\tthis._registeredSheets.push(oSheet);\r\n\r\n\treturn oSheet;\r\n};\r\n\r\n/**\r\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\r\n *\r\n * @param {Sheet} oSheet - The Sheet object that should be selected\r\n */\r\nWorkbook.prototype.selectSheet = function(oSheet) {\r\n\r\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\r\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\r\n\t}\r\n\r\n\t/* Remove selection on all sheets */\r\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\r\n\t\tsheetElement.views.defaultView.remove('selected');\r\n\t});\r\n\r\n\t/* Select the particular Sheet */\r\n\toSheet.views.defaultView.addAttribute({\r\n\t\tid: 'selected',\r\n\t\tname: 'tabSelected',\r\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t});\r\n};\r\n\r\n/**\r\n * Registers definedNames for sheets that use autoFilter\r\n * functionality before processing the super class serialization.\r\n *\r\n * @returns {string} - The serialized String representation of this workbook\r\n */\r\nWorkbook.prototype.serialize = function() {\r\n\tvar that = this;\r\n\r\n\t/**\r\n\t * Creates the value for the definedName. It automatically\r\n\t * retrieves the dimension of the sheet that is used by the\r\n\t * filter and escapes its representation.\r\n\t *\r\n\t * @param {string} sSheetName - The title of the sheet\r\n\t * @param {Sheet} oSheet - The sheet object containing the filter dimension\r\n\t * @returns {string} - Escaped definedName value\r\n\t * @private\r\n\t */\r\n\tfunction createDefinedName(sSheetName, oSheet) {\r\n\t\tvar sDefinedName, sDimension;\r\n\r\n\t\tsDimension = oSheet.filter.reference.value;\r\n\t\tsDefinedName = sSheetName.indexOf(' ') < 0 ? sSheetName : '\\'' + sSheetName + '\\'';\r\n\t\tsDefinedName += '!';\r\n\t\tsDefinedName += sDimension.replace(/([A-Z]+)|(\\d+)/g, function(match) {\r\n\t\t\treturn '$' + match;\r\n\t\t});\r\n\r\n\t\treturn sDefinedName;\r\n\t}\r\n\r\n\t/* Create definedNames before serializing the workbook */\r\n\tthis._registeredSheets.forEach(function(oSheet, iIndex, aArray) {\r\n\t\tvar sSheetName = that.sheets.childs[iIndex].name.value;\r\n\r\n\t\tif (oSheet.filter) {\r\n\t\t\tthat.definedNames.addChild({\r\n\t\t\t\ttag: 'definedName',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\tvalue: '_xlnm._FilterDatabase'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'localSheetId',\r\n\t\t\t\t\t\tvalue: iIndex\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'hidden',\r\n\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tvalue: createDefinedName(sSheetName, oSheet)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Object.getPrototypeOf(Workbook.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Column\t= __webpack_require__(25),\r\n\tText\t= __webpack_require__(13),\r\n\tRow\t\t= __webpack_require__(8),\r\n\tCell\t= __webpack_require__(3);\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\r\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\r\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\r\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(oConfig, oStyles) {\r\n\tvar aColumns, oColumn, i;\r\n\r\n\tthis.columns = [];\r\n\tthis._row = null;\r\n\tthis.styles = oStyles;\r\n\tthis.hideHeader = oConfig.hideHeader;\r\n\r\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\r\n\r\n\taColumns = oConfig.columns;\r\n\r\n\tfor (i = 0; i < aColumns.length; i++) {\r\n\r\n\t\t/* As of specification, the hierarchy level indentation will only be applied on the first row */\r\n\t\tif (i == 0) {\r\n\t\t\tif (typeof aColumns[i] === 'string') {\r\n\t\t\t\taColumns[i] = { property: aColumns[i] };\r\n\t\t\t}\r\n\r\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\r\n\t\t}\r\n\r\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.styles);\r\n\t\tthis.columns.push(oColumn);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis._row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis._row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\r\n\tvar i, normalizedHierarchyLevel;\r\n\r\n\tif (this._row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\r\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\r\n\r\n\t/*\r\n\t * We need to add, update or delete the outline attribute because\r\n\t * we reuse the row object\r\n\t */\r\n\tif (normalizedHierarchyLevel && !this._row.outline) {\r\n\t\tthis._row.addAttribute({\r\n\t\t\tid: 'outline',\r\n\t\t\tname: 'outlineLevel',\r\n\t\t\tvalue: normalizedHierarchyLevel\r\n\t\t});\r\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\r\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.remove('outline');\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this._row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\tif (this.hideHeader) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column, index, array) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t});\r\n\r\n\treturn row;\r\n};\r\n\r\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\r\n\tvar cell, row, type;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F2F2F2'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\trow.spans.value = '1:' + this.size();\r\n\r\n\t/* Create new Cell and assign value */\r\n\tcell = new Cell(type);\r\n\tcell.setValue('name', {name: sGroupName});\r\n\r\n\trow.addCell(cell);\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Cell\t\t\t= __webpack_require__(3),\r\n\tCalendarDate \t= __webpack_require__(9),\r\n\tNumeric \t\t= __webpack_require__(4),\r\n\tCurrency \t\t= __webpack_require__(11),\r\n\tBooleanType \t= __webpack_require__(10),\r\n\tEnumeration \t= __webpack_require__(26),\r\n\tText\t\t \t= __webpack_require__(13);\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.textAlign] - Optional alignment\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n}\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {string} [oData.textAlign] - Defines the horizontal alignment\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\r\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\r\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = oData.type;\r\n\r\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\r\n\t\ttype = new CalendarDate({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tcalendar: oData.calendar,\r\n\t\t\tformat: oData.format,\r\n\t\t\ttype: sType,\r\n\t\t\tinputFormat: oData.inputFormat\r\n\t\t});\r\n\r\n\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\r\n\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\r\n\r\n\t} else if (sType === 'number') {\r\n\t\ttype = new Numeric({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tdelimiter: oData.delimiter,\r\n\t\t\tscale: oData.scale,\r\n\t\t\ttype: oData.type,\r\n\t\t\tunit: oData.unit,\r\n\t\t\tunitProperty: oData.unitProperty\r\n\t\t});\r\n\t} else if (sType === 'currency') {\r\n\t\ttype = new Currency({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttype: sType,\r\n\t\t\tunitProperty: oData.unitProperty,\r\n\t\t\tdisplayUnit: oData.displayUnit,\r\n\t\t\tscale: oData.scale\r\n\t\t});\r\n\t} else if (sType === 'boolean') {\r\n\t\ttype = new BooleanType({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttrueValue: oData.trueValue,\r\n\t\t\tfalseValue: oData.falseValue\r\n\t\t});\r\n\t} else if (sType === 'enumeration') {\r\n\t\ttype = new Enumeration({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tvalueMap: oData.valueMap\r\n\t\t});\r\n\t} else {\r\n\t\ttype = new Text({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttype: 'text',\r\n\t\t\ttemplate: oData.template,\r\n\t\t\thierarchyLevel: oData.hierarchyLevel\r\n\t\t});\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\tif (!this.cell) {\r\n\t\tthis.cell = new Cell(this.type);\r\n\t}\r\n\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The Enumeration class represents an enumeration data type.\r\n * The Enumeration allows to assign particular values for\r\n * corresponding keys.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n * @constructor\r\n */\r\nfunction Enumeration(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis._valueMap = oConfig && oConfig.valueMap ? oConfig.valueMap : {};\r\n}\r\n\r\nEnumeration.prototype = Object.create(Type.prototype);\r\nEnumeration.prototype.constructor = Enumeration;\r\n\r\n/**\r\n * Returns the mapped value for the key that is present in the\r\n * business object.\r\n *\r\n * @param {string|Array} sProperty - Name of the property that contains the key\r\n * @param {Object} oData - Business object that contains the data\r\n * @returns {string} - The value of the given property after type specific processing\r\n * @protected\r\n */\r\nEnumeration.prototype.getValue = function(sProperty, oData) {\r\n\tvar key, result;\r\n\r\n\tkey = oData[sProperty];\r\n\tresult = this._valueMap instanceof Map ? this._valueMap.get(key) : this._valueMap[key];\r\n\r\n\treturn result || '';\r\n};\r\n\r\nmodule.exports = Enumeration;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\r\n\tRelationships\t= __webpack_require__(6);\r\n\r\n/**\r\n * This class represents the a Office Open XML Spreadsheet object\r\n * that is related to other objects via Relationships. The object\r\n * manages its Relationships by itself to encapsulate the complexity.\r\n *\r\n * A ReferenceNode also provides information about its path so that\r\n * all relationships that are connected to this ReferenceNode are are\r\n * relative to its path.\r\n *\r\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\r\n * @constructor\r\n */\r\nfunction ReferenceNode(oConfig) {\r\n\tXMLFile.call(this, oConfig);\r\n\r\n\tthis._relatedFiles = [];\r\n\tthis._relationships = new Relationships(this);\r\n\r\n\tthis.addRelatedFile(this._relationships);\r\n}\r\n\r\nReferenceNode.prototype = Object.create(XMLFile.prototype);\r\nReferenceNode.prototype.constructor = ReferenceNode;\r\n\r\n\r\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\r\n\tif (!(oXMLFile instanceof XMLFile)) {\r\n\t\tthrow new Error('A related file must be of type XMLFile');\r\n\t}\r\n\r\n\tthis._relatedFiles.push(oXMLFile);\r\n};\r\n\r\nReferenceNode.prototype.getRelationships = function() {\r\n\treturn this._relationships;\r\n};\r\n\r\n/**\r\n * Returns an Array of {@link XMLFile} objects that are reference by\r\n * this {@link ReferenceNode}. The method provides a flat copy of the\r\n * original data to avoid manipulation.\r\n *\r\n * @returns {Array} Array containing referenced files\r\n */\r\nReferenceNode.prototype.getRelatedFiles = function() {\r\n\treturn this._relatedFiles.slice();\r\n};\r\n\r\nmodule.exports = ReferenceNode;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\r\n\tStyle\t\t\t= __webpack_require__(29),\r\n\tFont\t\t\t= __webpack_require__(30),\r\n\tFill\t\t\t= __webpack_require__(31),\r\n\tBorder\t\t\t= __webpack_require__(32),\r\n\tNumberFormat\t= __webpack_require__(33);\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLFile.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLFile.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\tfilename: 'styles.xml',\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {Object} [oData.align] - Defines the text alignment within the cell\r\n * @param {string} [oData.align.horizontal] - Horizontal alignment\r\n * @param {string} [oData.align.vertical] - Vertical alignment\r\n * @param {number} [oData.align.indent] - Cell indentation\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\tstyle.setAlignment(oData.align);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tvar alreadyPresent;\r\n\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\r\n\t\treturn color.rgb.value === 'FF' + sHexColor;\r\n\t});\r\n\r\n\tif (alreadyPresent) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'rgb',\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\nvar Alignment = __webpack_require__(14);\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\treturn this.alignment ? this.alignment : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {Object} oAlign - Alignment configuration that gets applied or null\r\n * @param {string} [oAlign.horizontal] - Horizontal alignment\r\n * @param {string} [oAlign.vertical] - Vertical alignment\r\n * @param {number} [oAlign.indent] - Cell indentation\r\n */\r\nStyle.prototype.setAlignment = function(oAlign) {\r\n\tvar alignment, alignProperty;\r\n\r\n\talignProperty = 'alignment';\r\n\r\n\t// Removes the applyAlignment automatically when sAlign is null\r\n\tthis._apply(oAlign, 'Alignment');\r\n\r\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\talignment = new Alignment();\r\n\r\n\t\tthis.addChild(alignment);\r\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\r\n\t}\r\n\r\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\r\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\r\n\tthis[alignProperty].setIndent(oAlign.indent);\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\r\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\r\n};\r\n\r\nmodule.exports = Style;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 166;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// XLSXBuilder.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 20f9dc6df494cc6e5868","var XMLElement = require('./XMLElement');\r\nvar XMLAttribute = require('./XMLAttribute');\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLNode.js\n// module id = 0\n// module chunks = 0","var XMLNode\t\t = require('../xml/XMLNode');\r\n\r\n/**\r\n * The XMLFile class is a subclass of XMLNode that enriches the\r\n * object by path and file name information.\r\n *\r\n * @param {Object} oConfig - The configuration object for this XMLFile\r\n * @param {string} oConfig.path - The relative path of this XMLFile\r\n * @param {string} oConfig.filename - The file name of this XMLFile\r\n * @class\r\n */\r\nfunction XMLFile(oConfig) {\r\n\tXMLNode.call(this, oConfig);\r\n\r\n\tthis._filename = oConfig.filename;\r\n\tthis._path = oConfig.path;\r\n}\r\n\r\nXMLFile.prototype = Object.create(XMLNode.prototype);\r\nXMLFile.prototype.constructor = XMLFile;\r\n\r\n/**\r\n * Returns the name of this particular file including its file extension.\r\n *\r\n * @returns {string} Name of the file\r\n */\r\nXMLFile.prototype.getFileName = function() {\r\n\treturn this._filename;\r\n};\r\n\r\n/**\r\n * Assigns the given string as name of the file. The name must contain a file extension.\r\n *\r\n * @param {string} sFileName - Name of the file\r\n */\r\nXMLFile.prototype.setFileName = function(sFileName) {\r\n\r\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\r\n\t\tthrow new Error('Invalid file name: ' + sFileName);\r\n\t}\r\n\r\n\tthis._filename = sFileName;\r\n};\r\n\r\n/**\r\n * Returns the path of the file without any filename.\r\n *\r\n * @returns {string} - Path of the file\r\n */\r\nXMLFile.prototype.getPath = function() {\r\n\treturn this._path;\r\n};\r\n\r\n/**\r\n * Returns the absolute Path to the file.\r\n *\r\n * @returns {string} - Absolute path including the filename\r\n */\r\nXMLFile.prototype.getAbsolutePath = function() {\r\n\treturn this.getPath() + this.getFileName();\r\n};\r\n\r\n/**\r\n * Assigns the given path to this XMLFile. The path needs to end with\r\n * a slash to match the criteria.\r\n *\r\n * @param {string} sPath - Relative path of this XMLFile\r\n */\r\nXMLFile.prototype.setPath = function(sPath) {\r\n\r\n\t/* IE compatible endsWith */\r\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\r\n\t\tthrow new Error('Invalid file path: ' + sPath);\r\n\t}\r\n\r\n\tthis._path = sPath;\r\n};\r\n\r\nmodule.exports = XMLFile;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLFile.js\n// module id = 1\n// module chunks = 0","/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type(oConfig) {\r\n\tthis.styleId = null;\r\n\tthis.alignment = oConfig && oConfig.align ? oConfig.align : null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * All subclass implementations have to call the superclass method to\r\n * ensure that alignment information will not be lost.\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Configuration object that may contain alignment information\r\n * @protected\r\n */\r\nType.prototype._createConfiguration = function(oData) {\r\n\treturn this.alignment ? { align : {\thorizontal: this.alignment }} : {};\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} [oData] - Business object that contains the actual data\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function(oData) {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Type.js\n// module id = 2\n// module chunks = 0","var XMLNode\t\t \t= require('../xml/XMLNode'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tCurrency \t\t= require('../binding/type/Currency'),\r\n\tSharedStrings   = require('../data/SharedStrings');\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @class\r\n */\r\nfunction Cell(oType) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\t\tcase Numeric:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n\r\n\tthis.bindingType = oType;\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires either\r\n * an shared String proxy object or an inline String. This method can\r\n * only be called once per Cell!\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar shared, value;\r\n\r\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tshared = SharedStrings.getInstance();\r\n\t\t\tthis.text.value = shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Cell.js\n// module id = 3\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar config, i, key,\ttemplate, unit;\r\n\r\n\tconfig = Object.getPrototypeOf(Numeric.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number') {\r\n\t\tconfig.numberFormat = Numeric.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\ttemplate = Numeric.builtin[1];\r\n\tunit = '';\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = ' \"' + this.unit + '\"';\r\n\t}\r\n\r\n\t/* Apply Unit */\r\n\ttemplate += unit;\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\nmodule.exports = Numeric;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Numeric.js\n// module id = 4\n// module chunks = 0","/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && (oConfig.value || typeof oConfig.value === 'number') ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLElement.js\n// module id = 5\n// module chunks = 0","var\tXMLFile = require('../xml/XMLFile'),\r\n\tXMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\r\n * @constructor\r\n */\r\nfunction Relationships(oReferenceNode) {\r\n\tXMLFile.call(this, Relationships.metadata);\r\n\r\n\tif (oReferenceNode instanceof XMLFile) {\r\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\r\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\r\n\t}\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLFile.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\tfilename: '.rels',\r\n\tpath: '_rels/',\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n\r\n\treturn id;\r\n};\r\n\r\nmodule.exports = Relationships;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Relationships.js\n// module id = 6\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tRow\t\t\t = require('./Row');\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLFile.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\r\n\tthis._hierarchyLevel = 0;\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLFile.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'sheetPr',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'outlinePr',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'summaryBelow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'views',\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'defaultView',\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 'pane',\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\t/**\r\n\t * Inner function for calculating the column width. The function\r\n\t * will ceil the width to the next step of 0.25 so that the\r\n\t * result mod step is 0.\r\n\t * @param {number} nWidth - The width that needs to be adjusted\r\n\t * @returns {number}  A width rounded to the accuracy of 0.25\r\n\t */\r\n\tfunction roundWidth(nWidth) {\r\n\t\tvar factor, step;\r\n\r\n\t\tstep = 0.25;\r\n\t\tfactor = 1 / step;\r\n\r\n\t\treturn Math.ceil(nWidth * factor) / factor;\r\n\t}\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Sets the maximal hierarchy depth of this Sheet. The value will\r\n * only be changed if the given depth is higher than the previous\r\n * depth.\r\n *\r\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\r\n * @private\r\n */\r\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\r\n\r\n\t/* The maximum supported hierarchy depth is 7 */\r\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.format.hierarchyDepth) {\r\n\t\tthis.format.addAttribute({\r\n\t\t\tid: 'hierarchyDepth',\r\n\t\t\tname: 'outlineLevelRow',\r\n\t\t\tvalue: nHierarchyDepth || 0\r\n\t\t});\r\n\t}\r\n\r\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\tvar headerRow = this._columns.getHeader();\r\n\r\n\tif (headerRow === null) {\r\n\t\tthis.remove('filter');\r\n\t\tthis.views.defaultView.remove('pane');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._appendRow(headerRow);\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar i, dimension;\r\n\r\n\toRow.setReference('' + (this.data.childs.length + 1));\r\n\r\n\tthis.data.childs.push(oRow.serialize());\r\n\r\n\t/* Update sheet dimension */\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tif (this.childs[i].tag == 'dimension') {\r\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\r\n\r\n\t\t\tthis.dimension.reference.value = dimension;\r\n\r\n\t\t\tif (this.filter) {\r\n\t\t\t\tthis.filter.reference.value = dimension;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates a new group inside the sheet with the given hierarchy\r\n * level. All subsequent data rows will be assigned to this group.\r\n *\r\n * @function createGroup\r\n * @param {string} sName - Name of the group that will be displayed in the group header\r\n * @param {number} nLevel - Hierarchy level that will be used for outlining\r\n */\r\nSheet.prototype.createGroup = function(sName, nLevel) {\r\n\tvar groupHeaderRow;\r\n\r\n\tthis._hierarchyLevel = nLevel;\r\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\r\n\r\n\tthis._appendRow(groupHeaderRow);\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but the user rather runs out of\r\n * memory than reaching this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tvar nHierarchyLevel;\r\n\r\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\tnHierarchyLevel =\r\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\r\n\tthis._setHierarchyDepth(nHierarchyLevel);\r\n};\r\n\r\nmodule.exports = Sheet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Sheet.js\n// module id = 7\n// module chunks = 0","/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = require('../xml/XMLNode');\r\nvar Cell\t= require('./Cell');\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Row.js\n// module id = 8\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @protected\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar config, key, template;\r\n\r\n\tconfig = Object.getPrototypeOf(CalendarDate.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\tconfig.numberFormat = CalendarDate.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty -\r\n * @param {Object} oData - Line item that contains data\r\n * @returns {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar value = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\treturn CalendarDate._JsDateToExcel(value);\r\n\t}\r\n\r\n\t/* 2. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseStringDate(value, this.inputFormat));\r\n\t}\r\n\r\n\t/* 3. OData duration string 'PT01H23M45S' */\r\n\tif (this.type === 'time' && CalendarDate.odataDurationRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseODataDuration(value));\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseOdataDate(value));\r\n\t}\r\n\r\n\t/* 5. Unix timestamp as string */\r\n\tif (isFinite(value)) {\r\n\t\treturn CalendarDate._JsDateToExcel(parseInt(value, 10));\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @returns {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @returns {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date object or corresponding timestamp\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp) {\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 30.12.1899 00:00:00 which\r\n\t * corresponds to 0 in Excel\r\n\t */\r\n\treturn Math.max((nTimestamp / (86400 * 1000)) + (25567 + 2), 0);\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @returns {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/CalendarDate.js\n// module id = 9\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(BooleanType.prototype)._createConfiguration.call(this);\r\n\tconfig.numberFormat =\r\n\t\tthis.isCustomFormatted() ?\r\n\t\t\t{ format: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"' } : BooleanType.DEFAULT.numberFormat;\r\n\r\n\treturn config;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/BooleanType.js\n// module id = 10\n// module chunks = 0","var Numeric = require('./Numeric');\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This\r\n * has no effect on the technical scale of currency values. It is\r\n * only used for alignment purposes so that different currencies with\r\n * different scale are still aligned correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrency.DEFAULT_SCALE = 3;\r\n\r\nCurrency.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'AMD': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CAD': 2,\r\n\t'CHF': 2,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'COP': 0,\r\n\t'CRC': 0,\r\n\t'CZK': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'GYD': 0,\r\n\t'HUF': 0,\r\n\t'IDR': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MNT': 0,\r\n\t'MRO': 0,\r\n\t'MUR': 0,\r\n\t'OMR': 3,\r\n\t'PKR': 0,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'TZS': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UZS': 0,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @protected\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\t// TODO implement inheritance with Numeric class\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t// Apply fixed scale, only if no unitProperty is provided\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\r\n\t}\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof scale !== 'number') {\r\n\t\tscale = Currency.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + ' ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* - ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Currency.js\n// module id = 11\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tSharedString\t= require('./SharedString');\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tif (SharedStrings.instance instanceof SharedStrings) {\r\n\t\treturn SharedStrings.instance;\r\n\t}\r\n\r\n\tXMLFile.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLFile.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\tfilename: 'sharedStrings.xml',\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,{\r\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t\t*/\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\r\n\treturn index;\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedStrings.js\n// module id = 12\n// module chunks = 0","var Type = require('./Type');\r\nvar Alignment = require('../../style/Alignment');\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this Text type\r\n * @param {Object} [oConfig.font] - Font configuration object\r\n * @param {number} [oConfig.font.size] - Font size\r\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\r\n * @param {Object} [oConfig.fill] - Cell fill configuration object\r\n * @param {Object} [oConfig.fill.color] - Cell fill background color\r\n * @param {Object} [oConfig.fill.type] - Cell fill type\r\n * @param {Object} [oConfig.template] - Text template for this Type\r\n * @param {Object} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\r\n\r\n\tthis._styleIds = [];\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\n/**\r\n * This method creates the XLSX specific style configuration depending on the cell content\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Style configuration used by the Styles class\r\n * @protected\r\n */\r\nText.prototype._createConfiguration = function(oData) {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(Text.prototype)._createConfiguration.call(this);\r\n\tconfig.fill = this.fill;\r\n\tconfig.font = this.font;\r\n\r\n\t/* Overwrites existing alignment for a proper indent */\r\n\tif (this.hierarchyLevel) {\r\n\t\tconfig.align = {\r\n\t\t\thorizontal: Alignment.horizontal.LEFT,\r\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\r\n\t\t};\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\r\n * @returns {number} - ID of the registered Style\r\n */\r\nText.prototype.getStyleId = function(oData) {\r\n\tvar styleId, level;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.hierarchyLevel) {\r\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlevel = oData[this.hierarchyLevel];\r\n\tstyleId = this._styleIds[level];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis._styleIds[level] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this._styleIds[level];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar match, regex, result, skip, value;\r\n\r\n\tif (!this.template) {\r\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tskip = properties.every(function(property) {\r\n\t\treturn oData[property] === null\r\n\t\t\t|| typeof oData[property] === 'undefined'\r\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\r\n\t});\r\n\r\n\tif (skip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tresult = this.template;\r\n\tregex = /{([0-9]+)}/g;\r\n\r\n\tmatch = regex.exec(this.template);\r\n\twhile (match !== null) {\r\n\r\n\t\tvalue = oData[properties[match[1]]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (value === null || typeof value === 'undefined') {\r\n\t\t\tvalue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tresult = result.replace(match[0], value);\r\n\r\n\t\tmatch = regex.exec(this.template);\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = Text;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Text.js\n// module id = 13\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Alignment class defines the alignment of content within the\r\n * sheet cells. The Alignment is assigned to a particular Style that\r\n * is registered in the Styles class.\r\n *\r\n * @constructor\r\n */\r\nfunction Alignment() {\r\n\tXMLNode.call(this, Alignment.metadata);\r\n}\r\n\r\nAlignment.prototype = Object.create(XMLNode.prototype);\r\nAlignment.prototype.constructor = Alignment;\r\n\r\nAlignment.metadata = {\r\n\ttag: 'alignment'\r\n};\r\n\r\nAlignment.horizontal = {\r\n\tLEFT: 'left',\r\n\tCENTER: 'center',\r\n\tRIGHT: 'right',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t}\r\n};\r\n\r\nAlignment.vertical = {\r\n\tTOP: 'top',\r\n\tMIDDLE: 'middle',\r\n\tBOTTOM: 'bottom',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nAlignment.prototype.isDefault = function() {\r\n\treturn this.attributes.length == 0;\r\n};\r\n\r\n/**\r\n * Assigns the given indent to this Alignment object.\r\n *\r\n * @param {number} nIndent - Numerical value used as indentation\r\n */\r\nAlignment.prototype.setIndent = function(nIndent) {\r\n\r\n\t/* Remove indent */\r\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\r\n\t\tthis.remove('indent');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('indent', nIndent);\r\n\r\n\t/* A correct indent requires an explicit horizontal alignment */\r\n\tif (!this.horizontal) {\r\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given alignment as horizontal alignment.\r\n *\r\n * @param {string} sAlign - Horizontal alignment that gets applied\r\n */\r\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('horizontal', sAlign);\r\n};\r\n\r\n/**\r\n * Applies the given alignment as vertical alignment.\r\n *\r\n * @param {string} sAlign - Vertical alignment that gets applied\r\n */\r\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.vertical.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('vertical', sAlign);\r\n};\r\n\r\n/**\r\n * Assigns the given value as a named property on this Alignment object.\r\n *\r\n * @param {string} id - The named property id\r\n * @param {number|string} value - Textual or numerical value\r\n * @private\r\n */\r\nAlignment.prototype._setAlignmentAttribute = function(id, value) {\r\n\r\n\t/* Create attribute if not present */\r\n\tif (!this[id]) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: id,\r\n\t\t\tname: id\r\n\t\t});\r\n\t}\r\n\r\n\tthis[id].value = value;\r\n};\r\n\r\nAlignment.prototype.equals = function(oAlignment) {\r\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\r\n\t\t&& this.vertical == oAlignment.vertical\r\n\t\t&& this.horizontal == oAlignment.horizontal\r\n\t\t&& this.indent == oAlignment.indent;\r\n};\r\n\r\nmodule.exports = Alignment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Alignment.js\n// module id = 14\n// module chunks = 0","var App\t\t\t\t\t= require('./objects/App'),\r\n\tContentTypes\t\t= require('./objects/ContentTypes'),\r\n\tCore\t\t\t\t= require('./objects/Core'),\r\n\tRelationships\t\t= require('./objects/Relationships'),\r\n\tSheet\t\t\t\t= require('./data/Sheet'),\r\n\tWorkbook\t\t\t= require('./objects/Workbook');\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\r\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\r\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\r\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel) {\r\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\r\n\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\t/* Set default values */\r\n\tsSheetName = 'SAP Document Export';\r\n\tsMetadataSheetName = 'Metadata';\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n\tthis.workbook = new this.objects.Workbook();\r\n\r\n\t/* Overwrite default Sheet names if maintained */\r\n\tif (oContext) {\r\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\r\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\r\n\t}\r\n\r\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\r\n\tthis.workbook.selectSheet(this.sheet);\r\n\r\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\r\n\r\n\t\t/* Define column configuration for metadata sheet */\r\n\t\taMetadataConfig = [\r\n\t\t\t{\r\n\t\t\t\tproperty: 'key',\r\n\t\t\t\tlabel: 'Key',\r\n\t\t\t\twidth: 20\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tproperty: 'value',\r\n\t\t\t\tlabel: 'Value',\r\n\t\t\t\twidth: 20\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t/* Add optional Metadata Sheet*/\r\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\r\n\r\n\t\t/*\r\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\r\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\r\n\t\t * manipulate the original metadata array.\r\n\t\t */\r\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\r\n\t\t\toMetainfoGroup = oContext.metainfo[i];\r\n\r\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\r\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSheet: Sheet,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\t\tzip = new JSZip();\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType();\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\r\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\r\n\r\n\t\t// Add workbook and its related files\r\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\r\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\r\n\r\n\t\tthis.workbook.getRelatedFiles().forEach(function(file, index, array) {\r\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize());\r\n\t\t});\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\tif (zip.generateAsync) {\r\n\t\t\tpromise = zip.generateAsync(zipConfig);\r\n\t\t} else { // Zip.generate from JSZip 2.x\r\n\t\t\tpromise = new Promise(function(resolve, reject) {\r\n\t\t\t\tvar zipped = zip.generate(zipConfig);\r\n\r\n\t\t\t\tresolve(zipped);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t},\r\n\r\n\t/**\r\n\t * Appends the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tthis._insertIntoSheet(aData, this.sheet);\r\n\t},\r\n\r\n\t/**\r\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\r\n\t *\r\n\t * @param {Array} aData - Array of business objects that should be inserted\r\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\r\n\t * @private\r\n\t */\r\n\t_insertIntoSheet: function(aData, oSheet) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\toSheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/XLSXBuilder.js\n// module id = 17\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLFile.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLFile.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'app.xml',\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.54' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/App.js\n// module id = 18\n// module chunks = 0","var XMLElement = require('./XMLElement');\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLAttribute.js\n// module id = 19\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLFile.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLFile.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.FILENAME = '';\r\nContentTypes.metadata = {\r\n\tfilename: '[Content_Types].xml',\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ContentTypes.js\n// module id = 20\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLFile.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLFile.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'core.xml',\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = Core;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Core.js\n// module id = 21\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\nmodule.exports = SharedString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedString.js\n// module id = 22\n// module chunks = 0","var ColumnConfiguration\t= require('../binding/ColumnConfiguration'),\r\n\tReferenceNode\t\t= require('./ReferenceNode'),\r\n\tSharedStrings\t\t= require('../data/SharedStrings'),\r\n\tSheet\t\t\t\t= require('../data/Sheet'),\r\n\tStyles\t\t\t\t= require('../style/Styles');\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tvar key;\r\n\r\n\tReferenceNode.call(this, Workbook.metadata);\r\n\r\n\t/* Create and register central Styles instance for this workbook */\r\n\tthis._styles = new Styles();\r\n\tthis._styles.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._styles);\r\n\r\n\t/* Create and register central SharedStrings instance for this workbook */\r\n\tthis._sharedStrings = SharedStrings.getInstance();\r\n\tthis._sharedStrings.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._sharedStrings);\r\n\r\n\tfor (key in Workbook.RELATIONS) {\r\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\r\n\t}\r\n\r\n\tthis._registeredSheets = [];\r\n}\r\n\r\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.RELATIONS = {\r\n\tsharedStrings: {\r\n\t\ttarget: 'sharedStrings.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t},\r\n\tstyles: {\r\n\t\ttarget: 'styles.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t}\r\n};\r\n\r\nWorkbook.metadata = {\r\n\tfilename: 'workbook.xml',\r\n\tpath: 'xl/',\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'definedNames',\r\n\t\t\ttag: 'definedNames'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds a new {@link Sheet} to this {@link Workbook}\r\n *\r\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\r\n * @param {Object} oConfig - The column configuration of this Sheet\r\n * @param {Array} oConfig.columns - Array containing the configuration for each column\r\n * @param {boolean} [oConfig.bHideHeader] - Hides the header row (optional - default: false)\r\n * @returns {Sheet} - The newly added {@link Sheet}\r\n */\r\nWorkbook.prototype.addSheet = function(sName, oConfig) {\r\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\r\n\r\n\tnCount = this.sheets.childs.length + 1;\r\n\tsSheetFileName = 'sheet' + nCount + '.xml';\r\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\r\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\r\n\r\n\tthis.sheets.addChild({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + nCount\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: sId\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\toColumnConfiguration = new ColumnConfiguration(oConfig, this._styles);\r\n\toSheet = new Sheet(oColumnConfiguration);\r\n\toSheet.setFileName(sSheetFileName);\r\n\toSheet.setPath(this.getPath() + 'worksheets/');\r\n\r\n\tthis.addRelatedFile(oSheet);\r\n\tthis._registeredSheets.push(oSheet);\r\n\r\n\treturn oSheet;\r\n};\r\n\r\n/**\r\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\r\n *\r\n * @param {Sheet} oSheet - The Sheet object that should be selected\r\n */\r\nWorkbook.prototype.selectSheet = function(oSheet) {\r\n\r\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\r\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\r\n\t}\r\n\r\n\t/* Remove selection on all sheets */\r\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\r\n\t\tsheetElement.views.defaultView.remove('selected');\r\n\t});\r\n\r\n\t/* Select the particular Sheet */\r\n\toSheet.views.defaultView.addAttribute({\r\n\t\tid: 'selected',\r\n\t\tname: 'tabSelected',\r\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t});\r\n};\r\n\r\n/**\r\n * Registers definedNames for sheets that use autoFilter\r\n * functionality before processing the super class serialization.\r\n *\r\n * @returns {string} - The serialized String representation of this workbook\r\n */\r\nWorkbook.prototype.serialize = function() {\r\n\tvar that = this;\r\n\r\n\t/**\r\n\t * Creates the value for the definedName. It automatically\r\n\t * retrieves the dimension of the sheet that is used by the\r\n\t * filter and escapes its representation.\r\n\t *\r\n\t * @param {string} sSheetName - The title of the sheet\r\n\t * @param {Sheet} oSheet - The sheet object containing the filter dimension\r\n\t * @returns {string} - Escaped definedName value\r\n\t * @private\r\n\t */\r\n\tfunction createDefinedName(sSheetName, oSheet) {\r\n\t\tvar sDefinedName, sDimension;\r\n\r\n\t\tsDimension = oSheet.filter.reference.value;\r\n\t\tsDefinedName = sSheetName.indexOf(' ') < 0 ? sSheetName : '\\'' + sSheetName + '\\'';\r\n\t\tsDefinedName += '!';\r\n\t\tsDefinedName += sDimension.replace(/([A-Z]+)|(\\d+)/g, function(match) {\r\n\t\t\treturn '$' + match;\r\n\t\t});\r\n\r\n\t\treturn sDefinedName;\r\n\t}\r\n\r\n\t/* Create definedNames before serializing the workbook */\r\n\tthis._registeredSheets.forEach(function(oSheet, iIndex, aArray) {\r\n\t\tvar sSheetName = that.sheets.childs[iIndex].name.value;\r\n\r\n\t\tif (oSheet.filter) {\r\n\t\t\tthat.definedNames.addChild({\r\n\t\t\t\ttag: 'definedName',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\tvalue: '_xlnm._FilterDatabase'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'localSheetId',\r\n\t\t\t\t\t\tvalue: iIndex\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'hidden',\r\n\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tvalue: createDefinedName(sSheetName, oSheet)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Object.getPrototypeOf(Workbook.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Workbook.js\n// module id = 23\n// module chunks = 0","var Column\t= require('./Column'),\r\n\tText\t= require('./type/Text'),\r\n\tRow\t\t= require('../data/Row'),\r\n\tCell\t= require('../data/Cell');\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\r\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\r\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\r\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(oConfig, oStyles) {\r\n\tvar aColumns, oColumn, i;\r\n\r\n\tthis.columns = [];\r\n\tthis._row = null;\r\n\tthis.styles = oStyles;\r\n\tthis.hideHeader = oConfig.hideHeader;\r\n\r\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\r\n\r\n\taColumns = oConfig.columns;\r\n\r\n\tfor (i = 0; i < aColumns.length; i++) {\r\n\r\n\t\t/* As of specification, the hierarchy level indentation will only be applied on the first row */\r\n\t\tif (i == 0) {\r\n\t\t\tif (typeof aColumns[i] === 'string') {\r\n\t\t\t\taColumns[i] = { property: aColumns[i] };\r\n\t\t\t}\r\n\r\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\r\n\t\t}\r\n\r\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.styles);\r\n\t\tthis.columns.push(oColumn);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis._row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis._row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\r\n\tvar i, normalizedHierarchyLevel;\r\n\r\n\tif (this._row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\r\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\r\n\r\n\t/*\r\n\t * We need to add, update or delete the outline attribute because\r\n\t * we reuse the row object\r\n\t */\r\n\tif (normalizedHierarchyLevel && !this._row.outline) {\r\n\t\tthis._row.addAttribute({\r\n\t\t\tid: 'outline',\r\n\t\t\tname: 'outlineLevel',\r\n\t\t\tvalue: normalizedHierarchyLevel\r\n\t\t});\r\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\r\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.remove('outline');\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this._row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\tif (this.hideHeader) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column, index, array) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t});\r\n\r\n\treturn row;\r\n};\r\n\r\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\r\n\tvar cell, row, type;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F2F2F2'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\trow.spans.value = '1:' + this.size();\r\n\r\n\t/* Create new Cell and assign value */\r\n\tcell = new Cell(type);\r\n\tcell.setValue('name', {name: sGroupName});\r\n\r\n\trow.addCell(cell);\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/ColumnConfiguration.js\n// module id = 24\n// module chunks = 0","var Cell\t\t\t= require('../data/Cell'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tCurrency \t\t= require('../binding/type/Currency'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tEnumeration \t= require('../binding/type/Enumeration'),\r\n\tText\t\t \t= require('../binding/type/Text');\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.textAlign] - Optional alignment\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n}\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {string} [oData.textAlign] - Defines the horizontal alignment\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\r\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\r\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = oData.type;\r\n\r\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\r\n\t\ttype = new CalendarDate({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tcalendar: oData.calendar,\r\n\t\t\tformat: oData.format,\r\n\t\t\ttype: sType,\r\n\t\t\tinputFormat: oData.inputFormat\r\n\t\t});\r\n\r\n\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\r\n\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\r\n\r\n\t} else if (sType === 'number') {\r\n\t\ttype = new Numeric({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tdelimiter: oData.delimiter,\r\n\t\t\tscale: oData.scale,\r\n\t\t\ttype: oData.type,\r\n\t\t\tunit: oData.unit,\r\n\t\t\tunitProperty: oData.unitProperty\r\n\t\t});\r\n\t} else if (sType === 'currency') {\r\n\t\ttype = new Currency({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttype: sType,\r\n\t\t\tunitProperty: oData.unitProperty,\r\n\t\t\tdisplayUnit: oData.displayUnit,\r\n\t\t\tscale: oData.scale\r\n\t\t});\r\n\t} else if (sType === 'boolean') {\r\n\t\ttype = new BooleanType({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttrueValue: oData.trueValue,\r\n\t\t\tfalseValue: oData.falseValue\r\n\t\t});\r\n\t} else if (sType === 'enumeration') {\r\n\t\ttype = new Enumeration({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\tvalueMap: oData.valueMap\r\n\t\t});\r\n\t} else {\r\n\t\ttype = new Text({\r\n\t\t\talign: oData.textAlign,\r\n\t\t\ttype: 'text',\r\n\t\t\ttemplate: oData.template,\r\n\t\t\thierarchyLevel: oData.hierarchyLevel\r\n\t\t});\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\tif (!this.cell) {\r\n\t\tthis.cell = new Cell(this.type);\r\n\t}\r\n\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/Column.js\n// module id = 25\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Enumeration class represents an enumeration data type.\r\n * The Enumeration allows to assign particular values for\r\n * corresponding keys.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n * @constructor\r\n */\r\nfunction Enumeration(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis._valueMap = oConfig && oConfig.valueMap ? oConfig.valueMap : {};\r\n}\r\n\r\nEnumeration.prototype = Object.create(Type.prototype);\r\nEnumeration.prototype.constructor = Enumeration;\r\n\r\n/**\r\n * Returns the mapped value for the key that is present in the\r\n * business object.\r\n *\r\n * @param {string|Array} sProperty - Name of the property that contains the key\r\n * @param {Object} oData - Business object that contains the data\r\n * @returns {string} - The value of the given property after type specific processing\r\n * @protected\r\n */\r\nEnumeration.prototype.getValue = function(sProperty, oData) {\r\n\tvar key, result;\r\n\r\n\tkey = oData[sProperty];\r\n\tresult = this._valueMap instanceof Map ? this._valueMap.get(key) : this._valueMap[key];\r\n\r\n\treturn result || '';\r\n};\r\n\r\nmodule.exports = Enumeration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Enumeration.js\n// module id = 26\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tRelationships\t= require('./Relationships');\r\n\r\n/**\r\n * This class represents the a Office Open XML Spreadsheet object\r\n * that is related to other objects via Relationships. The object\r\n * manages its Relationships by itself to encapsulate the complexity.\r\n *\r\n * A ReferenceNode also provides information about its path so that\r\n * all relationships that are connected to this ReferenceNode are are\r\n * relative to its path.\r\n *\r\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\r\n * @constructor\r\n */\r\nfunction ReferenceNode(oConfig) {\r\n\tXMLFile.call(this, oConfig);\r\n\r\n\tthis._relatedFiles = [];\r\n\tthis._relationships = new Relationships(this);\r\n\r\n\tthis.addRelatedFile(this._relationships);\r\n}\r\n\r\nReferenceNode.prototype = Object.create(XMLFile.prototype);\r\nReferenceNode.prototype.constructor = ReferenceNode;\r\n\r\n\r\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\r\n\tif (!(oXMLFile instanceof XMLFile)) {\r\n\t\tthrow new Error('A related file must be of type XMLFile');\r\n\t}\r\n\r\n\tthis._relatedFiles.push(oXMLFile);\r\n};\r\n\r\nReferenceNode.prototype.getRelationships = function() {\r\n\treturn this._relationships;\r\n};\r\n\r\n/**\r\n * Returns an Array of {@link XMLFile} objects that are reference by\r\n * this {@link ReferenceNode}. The method provides a flat copy of the\r\n * original data to avoid manipulation.\r\n *\r\n * @returns {Array} Array containing referenced files\r\n */\r\nReferenceNode.prototype.getRelatedFiles = function() {\r\n\treturn this._relatedFiles.slice();\r\n};\r\n\r\nmodule.exports = ReferenceNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ReferenceNode.js\n// module id = 27\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tStyle\t\t\t= require('./Style'),\r\n\tFont\t\t\t= require('./Font'),\r\n\tFill\t\t\t= require('./Fill'),\r\n\tBorder\t\t\t= require('./Border'),\r\n\tNumberFormat\t= require('./NumberFormat');\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLFile.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLFile.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\tfilename: 'styles.xml',\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {Object} [oData.align] - Defines the text alignment within the cell\r\n * @param {string} [oData.align.horizontal] - Horizontal alignment\r\n * @param {string} [oData.align.vertical] - Vertical alignment\r\n * @param {number} [oData.align.indent] - Cell indentation\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\tstyle.setAlignment(oData.align);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tvar alreadyPresent;\r\n\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\r\n\t\treturn color.rgb.value === 'FF' + sHexColor;\r\n\t});\r\n\r\n\tif (alreadyPresent) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'rgb',\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Styles.js\n// module id = 28\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\nvar Alignment = require('./Alignment');\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\treturn this.alignment ? this.alignment : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {Object} oAlign - Alignment configuration that gets applied or null\r\n * @param {string} [oAlign.horizontal] - Horizontal alignment\r\n * @param {string} [oAlign.vertical] - Vertical alignment\r\n * @param {number} [oAlign.indent] - Cell indentation\r\n */\r\nStyle.prototype.setAlignment = function(oAlign) {\r\n\tvar alignment, alignProperty;\r\n\r\n\talignProperty = 'alignment';\r\n\r\n\t// Removes the applyAlignment automatically when sAlign is null\r\n\tthis._apply(oAlign, 'Alignment');\r\n\r\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\talignment = new Alignment();\r\n\r\n\t\tthis.addChild(alignment);\r\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\r\n\t}\r\n\r\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\r\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\r\n\tthis[alignProperty].setIndent(oAlign.indent);\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\r\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\r\n};\r\n\r\nmodule.exports = Style;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Style.js\n// module id = 29\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Font.js\n// module id = 30\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Fill.js\n// module id = 31\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Border.js\n// module id = 32\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 166;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/NumberFormat.js\n// module id = 33\n// module chunks = 0"],"sourceRoot":""}